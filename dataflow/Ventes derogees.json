{
	"name": "Ventes derogees",
	"properties": {
		"folder": {
			"name": "BASE COMMERCIALE"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "FacturationForOther",
						"type": "DatasetReference"
					},
					"name": "FacturationForOther"
				},
				{
					"dataset": {
						"referenceName": "associationoffre",
						"type": "DatasetReference"
					},
					"name": "ArticulationSap"
				},
				{
					"dataset": {
						"referenceName": "STG_OFFRE_SOURCE",
						"type": "DatasetReference"
					},
					"name": "stgOffre"
				},
				{
					"dataset": {
						"referenceName": "InPrixMoyenSplited",
						"type": "DatasetReference"
					},
					"name": "PrixPeriode"
				},
				{
					"dataset": {
						"referenceName": "ecouPartedisLikeWithIndex",
						"type": "DatasetReference"
					},
					"name": "ecoulmnt"
				},
				{
					"dataset": {
						"referenceName": "ref_atc",
						"type": "DatasetReference"
					},
					"name": "refAtc"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "outVenteDeroge",
						"type": "DatasetReference"
					},
					"name": "endSinkOutput"
				},
				{
					"dataset": {
						"referenceName": "tempFacturactionSM",
						"type": "DatasetReference"
					},
					"name": "sink1"
				},
				{
					"dataset": {
						"referenceName": "factorationAVM43",
						"type": "DatasetReference"
					},
					"name": "sink2"
				},
				{
					"dataset": {
						"referenceName": "factorationAVM43",
						"type": "DatasetReference"
					},
					"name": "sink3"
				},
				{
					"dataset": {
						"referenceName": "outVenteDeroge",
						"type": "DatasetReference"
					},
					"name": "sink4"
				},
				{
					"dataset": {
						"referenceName": "TestFacturation43",
						"type": "DatasetReference"
					},
					"name": "sinkFact43"
				},
				{
					"dataset": {
						"referenceName": "TestAfterArticulationOffreJoin",
						"type": "DatasetReference"
					},
					"name": "sinkAfterArticulatioOffreJoin"
				}
			],
			"transformations": [
				{
					"name": "join1"
				},
				{
					"name": "join2"
				},
				{
					"name": "derivedColumn1"
				},
				{
					"name": "columnChoicePrix"
				},
				{
					"name": "join3"
				},
				{
					"name": "derivedColumn2"
				},
				{
					"name": "derivedColumn3"
				},
				{
					"name": "torolltoList"
				},
				{
					"name": "derivedColumn4"
				},
				{
					"name": "createIndexPartedis"
				},
				{
					"name": "derivedColumn5"
				},
				{
					"name": "select1"
				},
				{
					"name": "select0"
				},
				{
					"name": "select3"
				},
				{
					"name": "Filtre43"
				},
				{
					"name": "join5"
				},
				{
					"name": "endArticulation"
				},
				{
					"name": "endOffre"
				},
				{
					"name": "derivedColumn8"
				},
				{
					"name": "Filtre5145"
				},
				{
					"name": "endEcoulement"
				},
				{
					"name": "split2"
				},
				{
					"name": "REcoulement43"
				},
				{
					"name": "select5"
				},
				{
					"name": "join7"
				},
				{
					"name": "select6"
				},
				{
					"name": "split3"
				},
				{
					"name": "REcoulement5145"
				},
				{
					"name": "filter3"
				},
				{
					"name": "filter4"
				},
				{
					"name": "torolltoList2"
				},
				{
					"name": "derivedColumn9"
				},
				{
					"name": "window1"
				},
				{
					"name": "ResteEcoulement"
				},
				{
					"name": "derivedColumn10"
				},
				{
					"name": "ddToList"
				},
				{
					"name": "window2"
				},
				{
					"name": "select7"
				},
				{
					"name": "derivedColumn11"
				},
				{
					"name": "caEcoulement"
				},
				{
					"name": "join8"
				},
				{
					"name": "select8"
				},
				{
					"name": "select9"
				},
				{
					"name": "split4"
				},
				{
					"name": "adddataOriginAvecMatchin"
				},
				{
					"name": "adddataOriginEccSansMatching"
				},
				{
					"name": "addDataOringFacturation"
				},
				{
					"name": "addDataOriginAvecMathcin4551"
				},
				{
					"name": "addDataOriginFSM"
				},
				{
					"name": "addDataOriginFM"
				},
				{
					"name": "derivedColumn14"
				},
				{
					"name": "clearColumnsAvecMatchig42"
				},
				{
					"name": "clearFacturationSansM"
				},
				{
					"name": "clearEcoulementSansMatch"
				},
				{
					"name": "clearColFacturationSM43"
				},
				{
					"name": "clearColAVM43"
				},
				{
					"name": "clearColumnAVM5145"
				},
				{
					"name": "clearColFSM4551"
				},
				{
					"name": "union1"
				},
				{
					"name": "unionFSM435145"
				},
				{
					"name": "union2"
				},
				{
					"name": "endFactSansMatching",
					"description": "search 1 col"
				},
				{
					"name": "union3"
				},
				{
					"name": "endAVM434551"
				},
				{
					"name": "union4"
				},
				{
					"name": "endFactAVM"
				},
				{
					"name": "derivedColumn15"
				},
				{
					"name": "endEcoulementSansMatcing"
				},
				{
					"name": "union5"
				},
				{
					"name": "select10"
				},
				{
					"name": "derivedColumn16"
				},
				{
					"name": "union6"
				},
				{
					"name": "endOffreATC"
				},
				{
					"name": "join9"
				},
				{
					"name": "derivedColumn17"
				},
				{
					"name": "derivedColumn18"
				},
				{
					"name": "select11"
				},
				{
					"name": "select12"
				},
				{
					"name": "ecoulementReste"
				},
				{
					"name": "aggregate1"
				},
				{
					"name": "derivedColumn19"
				},
				{
					"name": "derivedColumn20"
				},
				{
					"name": "select13"
				},
				{
					"name": "aggregate2"
				},
				{
					"name": "aggregate3"
				},
				{
					"name": "aggregate4"
				},
				{
					"name": "aggregate5"
				},
				{
					"name": "aggregate6"
				},
				{
					"name": "derivedColumn21"
				},
				{
					"name": "derivedColumn22"
				},
				{
					"name": "derivedColumn23"
				},
				{
					"name": "aggregate8"
				},
				{
					"name": "derivedColumn24"
				},
				{
					"name": "endATC"
				},
				{
					"name": "join10"
				},
				{
					"name": "select14"
				},
				{
					"name": "endDecrementation"
				},
				{
					"name": "unionDecrementation"
				},
				{
					"name": "filter6"
				},
				{
					"name": "ftest"
				},
				{
					"name": "filter7"
				},
				{
					"name": "aggregate9"
				},
				{
					"name": "aggregate10"
				},
				{
					"name": "aggregate11"
				},
				{
					"name": "aggregate12"
				},
				{
					"name": "aggregate13"
				},
				{
					"name": "aggregate14"
				},
				{
					"name": "aggregate15"
				},
				{
					"name": "aggregate16"
				},
				{
					"name": "aggregate17"
				},
				{
					"name": "aggregate18"
				},
				{
					"name": "aggregate19"
				},
				{
					"name": "aggregate20"
				},
				{
					"name": "aggregate21"
				},
				{
					"name": "aggregate22"
				},
				{
					"name": "aggregate23"
				},
				{
					"name": "aggregate24"
				},
				{
					"name": "select15"
				},
				{
					"name": "aggregate25"
				},
				{
					"name": "aggregate26"
				}
			],
			"scriptLines": [
				"source(output(",
				"          { Org commerciale} as string,",
				"          {Canal distribution} as string,",
				"          {Secteur d'activité} as string,",
				"          {Document de vente} as string,",
				"          Poste as string,",
				"          {Jour calendaire} as string,",
				"          {1ereDateLivrDdee} as string,",
				"          {Agence commerciale corrigé} as string,",
				"          {ATC Corrigé} as string,",
				"          {Donneur d'ordre} as string,",
				"          {Recept de march} as string,",
				"          {Destinataire facture} as string,",
				"          {Type doc vente} as string,",
				"          {Type de poste} as string,",
				"          Livraison as string,",
				"          {Type de livraison} as string,",
				"          {Type poste Livraison} as string,",
				"          Facture as string,",
				"          {Type de facture} as string,",
				"          {Type poste Facture} as string,",
				"          {Mois calendrier} as string,",
				"          {Année civile} as string,",
				"          {Motif commande} as string,",
				"          {Qté cdée} as string,",
				"          {CA cdé} as string,",
				"          {Qté livrée} as string,",
				"          {CA livré} as string,",
				"          {Qté facturée} as string,",
				"          {CA facturé} as string,",
				"          {Cout standard cdé} as string,",
				"          {Cout fabrication} as string,",
				"          {Cout standard livré} as string,",
				"          {Cout standard facturé} as string,",
				"          date_id as string,",
				"          year as string,",
				"          yearmonth as string,",
				"          qt_cd_e as string,",
				"          ca_cd_ as string,",
				"          qt_livr_e as string,",
				"          ca_livr_ as string,",
				"          qt_factur_e as string,",
				"          ca_factur_ as string,",
				"          year_month as string,",
				"          reference as string,",
				"          WholeSalerID as string,",
				"          WholeSalerHubID as string,",
				"          HubName as string,",
				"          HubSAPid as string,",
				"          toreplicate as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     inferDriftedColumnTypes: true,",
				"     ignoreNoFilesFound: false) ~> FacturationForOther",
				"source(output(",
				"          Commande as string,",
				"          {Référence Offre BA} as string,",
				"          {Qté Cdée} as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> ArticulationSap",
				"source(output(",
				"          DateOffre as string,",
				"          {Date Prev Cde} as string,",
				"          {Code projet} as string,",
				"          Projet as string,",
				"          Type as string,",
				"          {CP projet} as string,",
				"          {Ville projet} as string,",
				"          NbLogement as string,",
				"          {Référence} as string,",
				"          Marque as string,",
				"          Famille as string,",
				"          Produit as string,",
				"          {Quantité} as string,",
				"          {Prix de base} as string,",
				"          {Prix DO} as string,",
				"          {Prix pro} as string,",
				"          {Prix total} as string,",
				"          {Numéro interne 1} as string,",
				"          Client as string,",
				"          {Ville client} as string,",
				"          {Type financement} as string,",
				"          {Numéro interne 2} as string,",
				"          {Négoce} as string,",
				"          {Ville négoce} as string,",
				"          {Statut offre} as string,",
				"          Responsable as string,",
				"          Groupe as string,",
				"          Offre as string,",
				"          {Date de maj statut} as string,",
				"          {Numéro avant vente} as string,",
				"          {Créateur offre} as string,",
				"          {Commentaire interne} as string,",
				"          {Offre dérogée} as string,",
				"          {Contrat cadre} as string,",
				"          {Offre nationale} as string,",
				"          {Année Tarif} as string,",
				"          PotentielP1N as string,",
				"          PotentielP2N as string,",
				"          PotentielP3N as string,",
				"          PotentielP4N as string,",
				"          PotentielP5N as string,",
				"          PotentielP6N as string,",
				"          {DateFinValidité} as string,",
				"          CODE_CMI as string,",
				"          NOM_CMI as string,",
				"          CodeATC as string,",
				"          DEEE as string,",
				"          OffreSupprimee as string,",
				"          {Date de création} as string,",
				"          NomSignataire1 as string,",
				"          NomSignataire2 as string,",
				"          DateSignataire1 as string,",
				"          DateSignataire2 as string,",
				"          {DateDérogation} as string,",
				"          Canal as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> stgOffre",
				"source(output(",
				"          Article as string,",
				"          Distributeur as string,",
				"          prix_unitaire as string,",
				"          {Durée_période} as string,",
				"          {Période} as string,",
				"          {Mois début} as string,",
				"          {Mois fin} as string,",
				"          mois1 as string,",
				"          annee1 as string,",
				"          mois2 as string,",
				"          annee2 as string,",
				"          dd as string,",
				"          month as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> PrixPeriode",
				"source(output(",
				"          yearmonth as string,",
				"          year as string,",
				"          month as string,",
				"          qte_ecoulement as string,",
				"          ca_ecoulement as string,",
				"          POSSAMidString as string,",
				"          HubSAPid as string,",
				"          reference as string,",
				"          distributeur as string,",
				"          agence_code as string,",
				"          marque as string,",
				"          {Code postal} as string,",
				"          marque_name as string,",
				"          toreplicate as string,",
				"          dd as string,",
				"          {Période} as string,",
				"          ref2 as string,",
				"          indexcols2 as string,",
				"          qte_ecc as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> ecoulmnt",
				"source(output(",
				"          Marque as string,",
				"          {Code Postal début} as string,",
				"          {Code Postal fin} as string,",
				"          Utilisateur as string,",
				"          Fonction as string,",
				"          {Département} as string,",
				"          ATC as string,",
				"          NomATC as string,",
				"          {Plan primes} as string,",
				"          Matricule as string,",
				"          {Canal final} as string,",
				"          toreplicate as string,",
				"          dd as string,",
				"          DR as string,",
				"          {Code postal} as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> refAtc",
				"derivedColumn8, endArticulation join({Document de vente} == Commande,",
				"     joinType:'left',",
				"     broadcast: 'auto')~> join1",
				"derivedColumn19, endOffre join({Référence Offre BA} == Offre",
				"     && canal_final == Canal,",
				"     joinType:'left',",
				"     broadcast: 'auto')~> join2",
				"PrixPeriode derive({Période} = iif(length({Période})>1,{Période},\"0\"+{Période})) ~> derivedColumn1",
				"derivedColumn1 select(mapColumn(",
				"          Article,",
				"          Distributeur,",
				"          {Période},",
				"          annee2,",
				"          month",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> columnChoicePrix",
				"derivedColumn2, columnChoicePrix join(replace(lower(tempDist), \" \", \"\") == replace(lower(Distributeur), \" \", \"\")",
				"     && toInteger(year) == toInteger(annee2)",
				"     && toInteger({Mois calendrier}) == toInteger(month)",
				"     && coalesce(toString(toInteger(replace(reference, \" \", \"\"))),replace(reference, \" \", \"\")) == coalesce(toString(toInteger(replace(Article, \" \", \"\"))),replace(Article, \" \", \"\")),",
				"     joinType:'left',",
				"     broadcast: 'auto')~> join3",
				"select3 derive(toroll = mapLoop(abs(toInteger( {Qté facturée})), #index),",
				"          tempDist = iif(lower(WholeSalerID)=='ancs - accueil négoce chauffage sanitaire','partedis',\r",
				"  iif(instr(lower(WholeSalerID), 'trva - tereva' )>0, 'tereva', \r",
				"   iif(instr(lower(WholeSalerID), 'dsc')>0, 'dsc', \r",
				"    iif(instr(lower(WholeSalerID), 'vf' )>0, 'vf_confort', \r",
				"     iif(instr(lower(WholeSalerID), 'sonac' )>0, 'sonac',\r",
				"lower(WholeSalerID))))))) ~> derivedColumn2",
				"join3 derive({Période} = coalesce( {Période}, \"00\" )) ~> derivedColumn3",
				"filter3 foldDown(unroll(toroll, toroll),",
				"     mapColumn(",
				"          {Org commerciale} = { Org commerciale},",
				"          {Canal distribution},",
				"          {Secteur d'activité},",
				"          {Document de vente},",
				"          Poste,",
				"          {Jour calendaire},",
				"          {Agence commerciale corrigé},",
				"          {ATC Corrigé},",
				"          {Donneur d'ordre},",
				"          {Recept de march},",
				"          {Destinataire facture},",
				"          {Type doc vente},",
				"          {Type de poste},",
				"          Livraison,",
				"          {Type de livraison},",
				"          {Type poste Livraison},",
				"          Facture,",
				"          {Type de facture},",
				"          {Type poste Facture},",
				"          {Mois calendrier},",
				"          {Année civile},",
				"          {Motif commande},",
				"          {CA cdé},",
				"          {Qté livrée},",
				"          {CA livré},",
				"          {Qté facturée},",
				"          {CA facturé},",
				"          {Cout standard cdé},",
				"          {Cout fabrication},",
				"          {Cout standard livré},",
				"          {Cout standard facturé},",
				"          date_id,",
				"          year,",
				"          yearmonth,",
				"          qt_cd_e,",
				"          ca_cd_,",
				"          qt_livr_e,",
				"          qt_factur_e,",
				"          ca_factur_,",
				"          year_month,",
				"          reference,",
				"          WholeSalerID,",
				"          WholeSalerHubID,",
				"          HubName,",
				"          HubSAPid,",
				"          POSSAMidString,",
				"          toreplicate,",
				"          toroll,",
				"          {Période},",
				"          Offre,",
				"          {Facturation origin}",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> torolltoList",
				"torolltoList derive(ref2 = coalesce(toString(toInteger(replace(reference, \" \", \"\"))),replace(reference, \" \", \"\"))) ~> derivedColumn4",
				"derivedColumn4 window(over(year,",
				"          {Période},",
				"          POSSAMidString,",
				"          ref2),",
				"     asc(yearmonth, true),",
				"     asc(POSSAMidString, true),",
				"     asc(ref2, true),",
				"     indexcols2 = rowNumber()) ~> createIndexPartedis",
				"createIndexPartedis derive(indexcols2 = year+\"-\"+{Période}+\"-\"+POSSAMidString+\"-\"+coalesce(toString(toInteger(replace(reference, \" \", \"\"))),replace(reference, \" \", \"\"))+\"-\"+toString(indexcols2),",
				"          {Qté facturée} = iif(toDouble({Qté facturée})<=0, -1, 1)) ~> derivedColumn5",
				"stgOffre select(mapColumn(",
				"          Offre,",
				"          Canal,",
				"          {Numéro interne 2}",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"ecoulmnt select(mapColumn(",
				"          yearmonth,",
				"          year,",
				"          month,",
				"          qte_ecoulement,",
				"          ca_ecoulement,",
				"          POSSAMidString,",
				"          HubSAPidEcoul = HubSAPid,",
				"          reference,",
				"          distributeur,",
				"          agence_code,",
				"          marque,",
				"          {Code postal},",
				"          marque_name,",
				"          toreplicate,",
				"          dd,",
				"          indexcols2,",
				"          qte_ecc",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select0",
				"join2 select(mapColumn(",
				"          { Org commerciale},",
				"          {Canal distribution},",
				"          {Secteur d'activité},",
				"          {Document de vente},",
				"          Poste,",
				"          {Jour calendaire},",
				"          {1ereDateLivrDdee},",
				"          {Agence commerciale corrigé},",
				"          {ATC Corrigé},",
				"          {Donneur d'ordre},",
				"          {Recept de march},",
				"          {Destinataire facture},",
				"          {Type doc vente},",
				"          {Type de poste},",
				"          Livraison,",
				"          {Type de livraison},",
				"          {Type poste Livraison},",
				"          Facture,",
				"          {Type de facture},",
				"          {Type poste Facture},",
				"          {Mois calendrier},",
				"          {Année civile},",
				"          {Motif commande},",
				"          {CA cdé},",
				"          {Qté livrée},",
				"          {CA livré},",
				"          {Qté facturée},",
				"          {CA facturé},",
				"          {Cout standard cdé},",
				"          {Cout fabrication},",
				"          {Cout standard livré},",
				"          {Cout standard facturé},",
				"          date_id,",
				"          year,",
				"          yearmonth,",
				"          qt_cd_e,",
				"          ca_cd_,",
				"          qt_livr_e,",
				"          ca_livr_,",
				"          qt_factur_e,",
				"          ca_factur_,",
				"          year_month,",
				"          reference,",
				"          WholeSalerID,",
				"          WholeSalerHubID,",
				"          HubName,",
				"          HubSAPid,",
				"          toreplicate,",
				"          Commande,",
				"          {Référence Offre BA},",
				"          Offre,",
				"          POSSAMidString = {Numéro interne 2},",
				"          {Facturation origin},",
				"          {Articulation Origin},",
				"          {Offre origin}",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: false) ~> select3",
				"derivedColumn5 filter({Canal distribution}==\"43\") ~> Filtre43",
				"Filtre43, endEcoulement join(derivedColumn5@indexcols2 == select0@indexcols2,",
				"     joinType:'outer',",
				"     broadcast: 'auto')~> join5",
				"ArticulationSap derive({Articulation Origin} = \"Articulation Origin\") ~> endArticulation",
				"aggregate9 derive({Offre origin} = \"Offre origin\") ~> endOffre",
				"FacturationForOther derive({Facturation origin} = \"Facturation origin\",",
				"          {CA facturé} = toDouble({CA facturé})/toDouble({Qté facturée})) ~> derivedColumn8",
				"derivedColumn5 filter({Canal distribution}==\"51\" ||  {Canal distribution}==\"45\") ~> Filtre5145",
				"select0 derive({Ecoulement origin} = \"Ecoulement origin\") ~> endEcoulement",
				"select5 split(!isNull({Ecoulement origin}) && !isNull({Facturation origin}),",
				"     isNull({Facturation origin}),",
				"     disjoint: false) ~> split2@(avecMatching43, rigthEcoulement43, residu43)",
				"split2@rigthEcoulement43 select(mapColumn(",
				"          yearmonth = yearmonthEcoul,",
				"          year = yearEcoul,",
				"          month,",
				"          qte_ecoulement = ca_ecoulement,",
				"          POSSAMidStringEcoul,",
				"          HubSAPid,",
				"          reference = referenceEcoul,",
				"          distributeur,",
				"          agence_code,",
				"          marque,",
				"          {Code postal},",
				"          marque_name,",
				"          toreplicate = toreplicateEcoul,",
				"          dd,",
				"          indexcols2Ecoul,",
				"          qte_ecc,",
				"          {Ecoulement origin},",
				"          ca_ecoulement",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: true) ~> REcoulement43",
				"join5 select(mapColumn(",
				"          {Org commerciale},",
				"          {Canal distribution},",
				"          {Secteur d'activité},",
				"          {Document de vente},",
				"          Poste,",
				"          {Jour calendaire},",
				"          {Agence commerciale corrigé},",
				"          {ATC Corrigé},",
				"          {Donneur d'ordre},",
				"          {Recept de march},",
				"          {Destinataire facture},",
				"          {Type doc vente},",
				"          {Type de poste},",
				"          Livraison,",
				"          {Type de livraison},",
				"          {Type poste Livraison},",
				"          Facture,",
				"          {Type de facture},",
				"          {Type poste Facture},",
				"          {Mois calendrier},",
				"          {Année civile},",
				"          {Motif commande},",
				"          {CA cdé},",
				"          {Qté livrée},",
				"          {CA livré},",
				"          {Qté facturée},",
				"          {CA facturé},",
				"          {Cout standard cdé},",
				"          {Cout fabrication},",
				"          {Cout standard livré},",
				"          {Cout standard facturé},",
				"          date_id,",
				"          yearFact = torolltoList@year,",
				"          yearmonthFact = torolltoList@yearmonth,",
				"          qt_cd_e,",
				"          ca_cd_,",
				"          qt_livr_e,",
				"          qt_factur_e,",
				"          ca_factur_,",
				"          year_month,",
				"          referenceFact = torolltoList@reference,",
				"          WholeSalerID,",
				"          WholeSalerHubID,",
				"          HubName,",
				"          HubSAPid_Fact = HubSAPid,",
				"          POSSAMidStringFact = torolltoList@POSSAMidString,",
				"          toreplicateFact = torolltoList@toreplicate,",
				"          toroll,",
				"          {Période},",
				"          Offre,",
				"          {Facturation origin},",
				"          ref2,",
				"          indexcols2Fact = derivedColumn5@indexcols2,",
				"          yearmonthEcoul = select0@yearmonth,",
				"          yearEcoul = select0@year,",
				"          month,",
				"          qte_ecoulement,",
				"          ca_ecoulement,",
				"          POSSAMidStringEcoul = select0@POSSAMidString,",
				"          HubSAPid = HubSAPidEcoul,",
				"          referenceEcoul = select0@reference,",
				"          distributeur,",
				"          agence_code,",
				"          marque,",
				"          {Code postal},",
				"          marque_name,",
				"          toreplicateEcoul = select0@toreplicate,",
				"          dd,",
				"          indexcols2Ecoul = select0@indexcols2,",
				"          qte_ecc,",
				"          {Ecoulement origin}",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: true) ~> select5",
				"Filtre5145, REcoulement43 join(indexcols2 == indexcols2Ecoul,",
				"     joinType:'outer',",
				"     broadcast: 'auto')~> join7",
				"join7 select(mapColumn(",
				"          {Org commerciale},",
				"          {Canal distribution},",
				"          {Secteur d'activité},",
				"          {Document de vente},",
				"          Poste,",
				"          {Jour calendaire},",
				"          {Agence commerciale corrigé},",
				"          {ATC Corrigé},",
				"          {Donneur d'ordre},",
				"          {Recept de march},",
				"          {Destinataire facture},",
				"          {Type doc vente},",
				"          {Type de poste},",
				"          Livraison,",
				"          {Type de livraison},",
				"          {Type poste Livraison},",
				"          Facture,",
				"          {Type de facture},",
				"          {Type poste Facture},",
				"          {Mois calendrier},",
				"          {Année civile},",
				"          {Motif commande},",
				"          {CA cdé},",
				"          {Qté livrée},",
				"          {CA livré},",
				"          {Qté facturée},",
				"          {CA facturé},",
				"          {Cout standard cdé},",
				"          {Cout fabrication},",
				"          {Cout standard livré},",
				"          {Cout standard facturé},",
				"          date_id,",
				"          yearFact = torolltoList@year,",
				"          yearmonthFact = torolltoList@yearmonth,",
				"          qt_cd_e,",
				"          ca_cd_,",
				"          qt_livr_e,",
				"          qt_factur_e,",
				"          ca_factur_,",
				"          year_month,",
				"          referenceFact = torolltoList@reference,",
				"          WholeSalerID,",
				"          WholeSalerHubID,",
				"          HubName,",
				"          HubSAPidFact = torolltoList@HubSAPid,",
				"          POSSAMidString,",
				"          toreplicateFact = torolltoList@toreplicate,",
				"          toroll,",
				"          {Période},",
				"          Offre,",
				"          {Facturation origin},",
				"          ref2,",
				"          indexcols2,",
				"          yearmonthEcoul = REcoulement43@yearmonth,",
				"          yearEcoul = REcoulement43@year,",
				"          month,",
				"          qte_ecoulement,",
				"          POSSAMidStringEcoul,",
				"          HubSAPidEcoul = REcoulement43@HubSAPid,",
				"          referenceEcoul = REcoulement43@reference,",
				"          distributeur,",
				"          agence_code,",
				"          marque,",
				"          {Code postal},",
				"          marque_name,",
				"          toreplicateEcoul = REcoulement43@toreplicate,",
				"          dd,",
				"          indexcols2Ecoul,",
				"          qte_ecc,",
				"          {Ecoulement origin},",
				"          ca_ecoulement",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: true) ~> select6",
				"select6 split(!isNull({Ecoulement origin}) && !isNull({Facturation origin}),",
				"     isNull({Facturation origin}),",
				"     disjoint: false) ~> split3@(avecMatching5145, rigthEcoulement5154, residu5145)",
				"split3@rigthEcoulement5154 select(mapColumn(",
				"          yearmonth = yearmonthEcoul,",
				"          year = yearEcoul,",
				"          month,",
				"          qte_ecoulement,",
				"          POSSAMidString = POSSAMidStringEcoul,",
				"          HubSAPid = HubSAPidEcoul,",
				"          reference = referenceEcoul,",
				"          distributeur,",
				"          agence_code,",
				"          marque,",
				"          {Code postal},",
				"          marque_name,",
				"          toreplicate = toreplicateEcoul,",
				"          dd,",
				"          indexcols2 = indexcols2Ecoul,",
				"          qte_ecc,",
				"          {Ecoulement origin},",
				"          ca_ecoulement",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> REcoulement5145",
				"derivedColumn3 filter(({Canal distribution} !=\"42\" ) &&  (!isNull(POSSAMidString) && !isNull({Articulation Origin}) && !isNull({Offre origin}))) ~> filter3",
				"derivedColumn3 filter({Canal distribution} ==\"42\" || (isNull(POSSAMidString) || isNull({Articulation Origin}) || isNull({Offre origin}))) ~> filter4",
				"filter4 foldDown(unroll(toroll, toroll),",
				"     mapColumn(",
				"          { Org commerciale},",
				"          {Canal distribution},",
				"          {Secteur d'activité},",
				"          {Document de vente},",
				"          Poste,",
				"          {Jour calendaire},",
				"          {Agence commerciale corrigé},",
				"          {ATC Corrigé},",
				"          {Donneur d'ordre},",
				"          {Recept de march},",
				"          {Destinataire facture},",
				"          {Type doc vente},",
				"          {Type de poste},",
				"          Livraison,",
				"          {Type de livraison},",
				"          {Type poste Livraison},",
				"          Facture,",
				"          {Type de facture},",
				"          {Type poste Facture},",
				"          {Mois calendrier},",
				"          {Année civile},",
				"          {Motif commande},",
				"          {CA cdé},",
				"          {Qté livrée},",
				"          {CA livré},",
				"          {Qté facturée},",
				"          {CA facturé},",
				"          {Cout standard cdé},",
				"          {Cout fabrication},",
				"          {Cout standard livré},",
				"          {Cout standard facturé},",
				"          date_id,",
				"          year,",
				"          yearmonth,",
				"          qt_cd_e,",
				"          ca_cd_,",
				"          { Org comqtmerciale} = qt_livr_e,",
				"          qt_factur_e,",
				"          ca_factur_,",
				"          year_month,",
				"          reference,",
				"          WholeSalerID,",
				"          WholeSalerHubID,",
				"          HubName,",
				"          HubSAPid,",
				"          POSSAMidString,",
				"          toreplicate,",
				"          toroll,",
				"          {Période},",
				"          Offre,",
				"          {Facturation origin}",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> torolltoList2",
				"torolltoList2 derive(ref2 = coalesce(toString(toInteger(replace(reference, \" \", \"\"))),replace(reference, \" \", \"\"))) ~> derivedColumn9",
				"derivedColumn9 window(over(year,",
				"          {Période},",
				"          HubSAPid,",
				"          ref2),",
				"     asc(yearmonth, true),",
				"     asc(HubSAPid, true),",
				"     asc(reference, true),",
				"     indexcol2 = rowNumber()) ~> window1",
				"derivedColumn17 aggregate(groupBy(yearmonth,",
				"          year,",
				"          month,",
				"          periode,",
				"          qte_ecoulement,",
				"          POSSAMidString,",
				"          HubSAPid,",
				"          reference,",
				"          distributeur,",
				"          agence_code,",
				"          marque,",
				"          {Code postal},",
				"          marque_name,",
				"          toreplicate,",
				"          dd,",
				"          {Ecoulement origin}),",
				"     qte_ecc = sum(toFloat(qte_ecc)),",
				"          ca_ecoulement = min(toFloat(ca_ecoulement))) ~> ResteEcoulement",
				"ResteEcoulement derive(dd = mapLoop(abs(toInteger(qte_ecc)), #index),",
				"          ref2 = coalesce(toString(toInteger(replace(reference, \" \", \"\"))),replace(reference, \" \", \"\"))) ~> derivedColumn10",
				"derivedColumn10 foldDown(unroll(dd, dd),",
				"     mapColumn(",
				"          yearmonth,",
				"          year,",
				"          month,",
				"          periode,",
				"          qte_ecoulement,",
				"          POSSAMidString,",
				"          HubSAPid,",
				"          reference,",
				"          distributeur,",
				"          agence_code,",
				"          marque,",
				"          {Code postal},",
				"          marque_name,",
				"          toreplicate,",
				"          dd,",
				"          {Ecoulement origin},",
				"          qte_ecc,",
				"          ca_ecoulement,",
				"          ref2",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> ddToList",
				"ddToList window(over(year,",
				"          periode,",
				"          HubSAPid,",
				"          ref2),",
				"     asc(year, true),",
				"     asc(HubSAPid, true),",
				"     asc(ref2, true),",
				"     indexcol2 = rowNumber()) ~> window2",
				"window2 select(mapColumn(",
				"          yearmonth,",
				"          year,",
				"          month,",
				"          qte_ecoulement,",
				"          POSSAMidString,",
				"          HubSAPid,",
				"          reference,",
				"          distributeur,",
				"          agence_code,",
				"          marque,",
				"          {Code postal},",
				"          marque_name,",
				"          toreplicate,",
				"          {Ecoulement origin},",
				"          qte_ecc,",
				"          indexcol2,",
				"          ca_ecoulement,",
				"          periode,",
				"          ref2",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select7",
				"select7 derive(indexcols2 = year+\"-\"+periode+\"-\"+HubSAPid+\"-\"+coalesce(toString(toInteger(replace(reference, \" \", \"\"))),replace(reference, \" \", \"\"))+\"-\"+toString(indexcol2),",
				"          qte_ecc = iif(toInteger(qte_ecc) >0, 1, -1 )) ~> derivedColumn11",
				"select11 derive(ca_ecoulement = abs(toDouble(ca_ecoulement))*qte_ecc) ~> caEcoulement",
				"select12, ecoulementReste join(select12@indexcols2 == ecoulementReste@indexcols2,",
				"     joinType:'outer',",
				"     broadcast: 'auto')~> join8",
				"window1 select(mapColumn(",
				"          { Org commerciale},",
				"          {Canal distribution},",
				"          {Secteur d'activité},",
				"          {Document de vente},",
				"          Poste,",
				"          {Jour calendaire},",
				"          {Agence commerciale corrigé},",
				"          {ATC Corrigé},",
				"          {Donneur d'ordre},",
				"          {Recept de march},",
				"          {Destinataire facture},",
				"          {Type doc vente},",
				"          {Type de poste},",
				"          Livraison,",
				"          {Type de livraison},",
				"          {Type poste Livraison},",
				"          Facture,",
				"          {Type de facture},",
				"          {Type poste Facture},",
				"          {Mois calendrier},",
				"          {Année civile},",
				"          {Motif commande},",
				"          {CA cdé},",
				"          {Qté livrée},",
				"          {CA livré},",
				"          {Qté facturée},",
				"          {CA facturé},",
				"          {Cout standard cdé},",
				"          {Cout fabrication},",
				"          {Cout standard livré},",
				"          {Cout standard facturé},",
				"          date_id,",
				"          year,",
				"          yearmonth,",
				"          qt_cd_e,",
				"          ca_cd_,",
				"          { Org comqtmerciale},",
				"          qt_factur_e,",
				"          ca_factur_,",
				"          year_month,",
				"          reference,",
				"          WholeSalerID,",
				"          WholeSalerHubID,",
				"          HubName,",
				"          HubSAPid,",
				"          POSSAMidString,",
				"          toreplicate,",
				"          toroll,",
				"          {Période},",
				"          Offre,",
				"          {Facturation origin},",
				"          ref2,",
				"          indexcol2",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select8",
				"join8 select(mapColumn(",
				"          { Org commerciale},",
				"          {Canal distribution},",
				"          {Secteur d'activité},",
				"          {Document de vente},",
				"          Poste,",
				"          {Jour calendaire},",
				"          {Agence commerciale corrigé},",
				"          {ATC Corrigé},",
				"          {Donneur d'ordre},",
				"          {Recept de march},",
				"          {Destinataire facture},",
				"          {Type doc vente},",
				"          {Type de poste},",
				"          Livraison,",
				"          {Type de livraison},",
				"          {Type poste Livraison},",
				"          Facture,",
				"          {Type de facture},",
				"          {Type poste Facture},",
				"          {Mois calendrier},",
				"          {Année civile},",
				"          {Motif commande},",
				"          {CA cdé},",
				"          {Qté livrée},",
				"          {CA livré},",
				"          {Qté facturée},",
				"          {CA facturé},",
				"          {Cout standard cdé},",
				"          {Cout fabrication},",
				"          {Cout standard livré},",
				"          {Cout standard facturé},",
				"          date_id,",
				"          year,",
				"          yearmonth,",
				"          qt_cd_e,",
				"          ca_cd_,",
				"          F_reference = select12@reference,",
				"          qt_factur_e,",
				"          ca_factur_,",
				"          year_month,",
				"          WholeSalerID,",
				"          WholeSalerHubID,",
				"          HubName,",
				"          F_HubSAPid = select12@HubSAPid,",
				"          F_POSSAMidString = select12@POSSAMidString,",
				"          toreplicate = select12@toreplicate,",
				"          toroll,",
				"          {Période},",
				"          Offre,",
				"          {Facturation origin},",
				"          ref2 = ecoulementReste@ref2,",
				"          E_yearmonth,",
				"          E_year,",
				"          E_month,",
				"          qte_ecoulement,",
				"          POSSAMidString = ecoulementReste@POSSAMidString,",
				"          HubSAPid = ecoulementReste@HubSAPid,",
				"          E_reference = ecoulementReste@reference,",
				"          distributeur,",
				"          agence_code,",
				"          marque,",
				"          {Code postal},",
				"          marque_name,",
				"          {Ecoulement origin},",
				"          qte_ecc,",
				"          ca_ecoulement",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select9",
				"select9 split(!isNull({Ecoulement origin}) && !isNull({Facturation origin}),",
				"     isNull({Facturation origin}),",
				"     disjoint: false) ~> split4@(avecMatich, rightEcoulement, leftFacturation)",
				"split4@avecMatich derive(data_origin = \"facturation avec matching\") ~> adddataOriginAvecMatchin",
				"split4@rightEcoulement derive(data_origin = \"écoulement sans matching\") ~> adddataOriginEccSansMatching",
				"split4@leftFacturation derive(data_origin = \"facturation sans matching\",",
				"          {Qté facturée} = toInteger({Qté facturée})) ~> addDataOringFacturation",
				"split3@avecMatching5145 derive(data_origin = \"facturation avec matching\") ~> addDataOriginAvecMathcin4551",
				"split3@residu5145 derive(data_origin = \"facturation sans matching\") ~> addDataOriginFSM",
				"split2@avecMatching43 derive(data_origin = \"facturation avec matching\") ~> addDataOriginFM",
				"split2@residu43 derive(data_origin = \"facturation sans matching\") ~> derivedColumn14",
				"adddataOriginAvecMatchin select(mapColumn(",
				"          Org_commerciale = { Org commerciale},",
				"          {Canal distribution},",
				"          {Secteur d'activité},",
				"          {Document de vente},",
				"          Poste,",
				"          {Jour calendaire},",
				"          {Agence commerciale corrigé},",
				"          {ATC Corrigé},",
				"          {Donneur d'ordre},",
				"          {Recept de march},",
				"          {Destinataire facture},",
				"          {Type doc vente},",
				"          {Type de poste},",
				"          Livraison,",
				"          {Type de livraison},",
				"          {Type poste Livraison},",
				"          Facture,",
				"          {Type de facture},",
				"          {Type poste Facture},",
				"          {Mois calendrier},",
				"          {Année civile},",
				"          {Motif commande},",
				"          {CA cdé},",
				"          {Qté livrée},",
				"          {CA livré},",
				"          {Qté facturée},",
				"          {CA facturé},",
				"          {Cout standard cdé},",
				"          {Cout fabrication},",
				"          {Cout standard livré},",
				"          {Cout standard facturé},",
				"          date_id,",
				"          year,",
				"          yearmonth,",
				"          qt_cd_e,",
				"          ca_cd_,",
				"          qt_factur_e,",
				"          ca_factur_,",
				"          reference = F_reference,",
				"          WholeSalerID,",
				"          WholeSalerHubID,",
				"          HubName,",
				"          {Période},",
				"          Offre,",
				"          qte_ecoulement,",
				"          POSSAMidString,",
				"          HubSAPid,",
				"          reference = E_reference,",
				"          distributeur,",
				"          agence_code,",
				"          marque,",
				"          {Code postal},",
				"          marque_name,",
				"          qte_ecc,",
				"          ca_ecoulement,",
				"          data_origin",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> clearColumnsAvecMatchig42",
				"addDataOringFacturation select(mapColumn(",
				"          Org_commerciale = { Org commerciale},",
				"          {Canal distribution},",
				"          {Secteur d'activité},",
				"          {Document de vente},",
				"          Poste,",
				"          {Jour calendaire},",
				"          {Agence commerciale corrigé},",
				"          {ATC Corrigé},",
				"          {Donneur d'ordre},",
				"          {Recept de march},",
				"          {Destinataire facture},",
				"          {Type doc vente},",
				"          {Type de poste},",
				"          Livraison,",
				"          {Type de livraison},",
				"          {Type poste Livraison},",
				"          Facture,",
				"          {Type de facture},",
				"          {Type poste Facture},",
				"          {Mois calendrier},",
				"          {Année civile},",
				"          {Motif commande},",
				"          {CA cdé},",
				"          {Qté livrée},",
				"          {CA livré},",
				"          {Qté facturée},",
				"          {CA facturé},",
				"          {Cout standard cdé},",
				"          {Cout fabrication},",
				"          {Cout standard livré},",
				"          {Cout standard facturé},",
				"          date_id,",
				"          year,",
				"          yearmonth,",
				"          qt_cd_e,",
				"          ca_cd_,",
				"          qt_factur_e,",
				"          ca_factur_,",
				"          year_month,",
				"          reference = F_reference,",
				"          WholeSalerID,",
				"          WholeSalerHubID,",
				"          HubName,",
				"          HubSAPid = F_HubSAPid,",
				"          POSSAMidString = F_POSSAMidString,",
				"          {Période},",
				"          Offre,",
				"          data_origin",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> clearFacturationSansM",
				"adddataOriginEccSansMatching select(mapColumn(",
				"          yearmonth = E_yearmonth,",
				"          year = E_year,",
				"          month = E_month,",
				"          qte_ecoulement,",
				"          POSSAMidString,",
				"          HubSAPid,",
				"          reference = E_reference,",
				"          distributeur,",
				"          agence_code,",
				"          marque,",
				"          {Code postal},",
				"          marque_name,",
				"          {Ecoulement origin},",
				"          qte_ecc,",
				"          ca_ecoulement,",
				"          data_origin",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> clearEcoulementSansMatch",
				"derivedColumn14 select(mapColumn(",
				"          {Org commerciale},",
				"          {Canal distribution},",
				"          {Secteur d'activité},",
				"          {Document de vente},",
				"          Poste,",
				"          {Jour calendaire},",
				"          {Agence commerciale corrigé},",
				"          {ATC Corrigé},",
				"          {Donneur d'ordre},",
				"          {Recept de march},",
				"          {Destinataire facture},",
				"          {Type doc vente},",
				"          {Type de poste},",
				"          Livraison,",
				"          {Type de livraison},",
				"          {Type poste Livraison},",
				"          Facture,",
				"          {Type de facture},",
				"          {Type poste Facture},",
				"          {Mois calendrier},",
				"          {Année civile},",
				"          {Motif commande},",
				"          {CA cdé},",
				"          {Qté livrée},",
				"          {CA livré},",
				"          {Qté facturée},",
				"          {CA facturé},",
				"          {Cout standard cdé},",
				"          {Cout fabrication},",
				"          {Cout standard livré},",
				"          {Cout standard facturé},",
				"          date_id,",
				"          year = yearFact,",
				"          yearmonth = yearmonthFact,",
				"          qt_cd_e,",
				"          ca_cd_,",
				"          qt_livr_e,",
				"          qt_factur_e,",
				"          ca_factur_,",
				"          year_month,",
				"          reference = referenceFact,",
				"          WholeSalerID,",
				"          WholeSalerHubID,",
				"          HubName,",
				"          HubSAPid = HubSAPid_Fact,",
				"          POSSAMidString = POSSAMidStringFact,",
				"          {Période},",
				"          Offre,",
				"          data_origin",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> clearColFacturationSM43",
				"addDataOriginFM select(mapColumn(",
				"          Org_commerciale = {Org commerciale},",
				"          {Canal distribution},",
				"          {Secteur d'activité},",
				"          {Document de vente},",
				"          Poste,",
				"          {Jour calendaire},",
				"          {Agence commerciale corrigé},",
				"          {ATC Corrigé},",
				"          {Donneur d'ordre},",
				"          {Recept de march},",
				"          {Destinataire facture},",
				"          {Type doc vente},",
				"          {Type de poste},",
				"          Livraison,",
				"          {Type de livraison},",
				"          {Type poste Livraison},",
				"          Facture,",
				"          {Type de facture},",
				"          {Type poste Facture},",
				"          {Mois calendrier},",
				"          {Année civile},",
				"          {Motif commande},",
				"          {CA cdé},",
				"          {Qté livrée},",
				"          {CA livré},",
				"          {Qté facturée},",
				"          {CA facturé},",
				"          {Cout standard cdé},",
				"          {Cout fabrication},",
				"          {Cout standard livré},",
				"          {Cout standard facturé},",
				"          qt_cd_e,",
				"          ca_cd_,",
				"          qt_livr_e,",
				"          qt_factur_e,",
				"          ca_factur_,",
				"          WholeSalerID,",
				"          WholeSalerHubID,",
				"          HubName,",
				"          POSSAMidString = POSSAMidStringFact,",
				"          {Période},",
				"          Offre,",
				"          yearmonth = yearmonthFact,",
				"          year = yearFact,",
				"          month,",
				"          qte_ecoulement,",
				"          ca_ecoulement,",
				"          HubSAPid,",
				"          reference = referenceEcoul,",
				"          distributeur,",
				"          agence_code,",
				"          marque,",
				"          {Code postal},",
				"          marque_name,",
				"          qte_ecc,",
				"          data_origin",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> clearColAVM43",
				"addDataOriginAvecMathcin4551 select(mapColumn(",
				"          Org_commerciale = {Org commerciale},",
				"          {Canal distribution},",
				"          {Secteur d'activité},",
				"          {Document de vente},",
				"          Poste,",
				"          {Jour calendaire},",
				"          {Agence commerciale corrigé},",
				"          {ATC Corrigé},",
				"          {Donneur d'ordre},",
				"          {Recept de march},",
				"          {Destinataire facture},",
				"          {Type doc vente},",
				"          {Type de poste},",
				"          Livraison,",
				"          {Type de livraison},",
				"          {Type poste Livraison},",
				"          Facture,",
				"          {Type de facture},",
				"          {Type poste Facture},",
				"          {Mois calendrier},",
				"          {Année civile},",
				"          {Motif commande},",
				"          {CA cdé},",
				"          {Qté livrée},",
				"          {CA livré},",
				"          {Qté facturée},",
				"          {CA facturé},",
				"          {Cout standard cdé},",
				"          {Cout fabrication},",
				"          {Cout standard livré},",
				"          {Cout standard facturé},",
				"          date_id,",
				"          qt_cd_e,",
				"          ca_cd_,",
				"          qt_livr_e,",
				"          qt_factur_e,",
				"          ca_factur_,",
				"          WholeSalerID,",
				"          WholeSalerHubID,",
				"          HubName,",
				"          {Période},",
				"          Offre,",
				"          yearmonth = yearmonthFact,",
				"          year = yearFact,",
				"          month,",
				"          qte_ecoulement,",
				"          POSSAMidString = POSSAMidStringEcoul,",
				"          HubSAPid = HubSAPidEcoul,",
				"          reference = referenceEcoul,",
				"          distributeur,",
				"          agence_code,",
				"          marque,",
				"          {Code postal},",
				"          marque_name,",
				"          qte_ecc,",
				"          ca_ecoulement,",
				"          data_origin",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> clearColumnAVM5145",
				"addDataOriginFSM select(mapColumn(",
				"          {Org commerciale},",
				"          {Canal distribution},",
				"          {Secteur d'activité},",
				"          {Document de vente},",
				"          Poste,",
				"          {Jour calendaire},",
				"          {Agence commerciale corrigé},",
				"          {ATC Corrigé},",
				"          {Donneur d'ordre},",
				"          {Recept de march},",
				"          {Destinataire facture},",
				"          {Type doc vente},",
				"          {Type de poste},",
				"          Livraison,",
				"          {Type de livraison},",
				"          {Type poste Livraison},",
				"          Facture,",
				"          {Type de facture},",
				"          {Type poste Facture},",
				"          {Mois calendrier},",
				"          {Année civile},",
				"          {Motif commande},",
				"          {CA cdé},",
				"          {Qté livrée},",
				"          {CA livré},",
				"          {Qté facturée},",
				"          {CA facturé},",
				"          {Cout standard cdé},",
				"          {Cout fabrication},",
				"          {Cout standard livré},",
				"          {Cout standard facturé},",
				"          date_id,",
				"          year = yearFact,",
				"          month,",
				"          yearmonth = yearmonthFact,",
				"          qt_cd_e,",
				"          ca_cd_,",
				"          qt_livr_e,",
				"          qt_factur_e,",
				"          ca_factur_,",
				"          year_month,",
				"          reference = referenceFact,",
				"          WholeSalerID,",
				"          WholeSalerHubID,",
				"          HubName,",
				"          HubSAPid = HubSAPidFact,",
				"          POSSAMidString,",
				"          {Période},",
				"          Offre,",
				"          data_origin",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> clearColFSM4551",
				"clearColFSM4551, clearColFacturationSM43 union(byName: true)~> union1",
				"union1 select(mapColumn(",
				"          Org_commerciale = {Org commerciale},",
				"          {Canal distribution},",
				"          {Secteur d'activité},",
				"          {Document de vente},",
				"          Poste,",
				"          {Jour calendaire},",
				"          {Agence commerciale corrigé},",
				"          {ATC Corrigé},",
				"          {Donneur d'ordre},",
				"          {Recept de march},",
				"          {Destinataire facture},",
				"          {Type doc vente},",
				"          {Type de poste},",
				"          Livraison,",
				"          {Type de livraison},",
				"          {Type poste Livraison},",
				"          Facture,",
				"          {Type de facture},",
				"          {Type poste Facture},",
				"          {Mois calendrier},",
				"          {Année civile},",
				"          {Motif commande},",
				"          {CA cdé},",
				"          {Qté livrée},",
				"          {CA livré},",
				"          {Qté facturée},",
				"          {CA facturé},",
				"          {Cout standard cdé},",
				"          {Cout fabrication},",
				"          {Cout standard livré},",
				"          {Cout standard facturé},",
				"          date_id,",
				"          year,",
				"          yearmonth,",
				"          qt_cd_e,",
				"          ca_cd_,",
				"          qt_factur_e,",
				"          ca_factur_,",
				"          year_month,",
				"          reference,",
				"          WholeSalerID,",
				"          WholeSalerHubID,",
				"          HubName,",
				"          HubSAPid,",
				"          POSSAMidString,",
				"          {Période},",
				"          Offre,",
				"          data_origin",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> unionFSM435145",
				"clearFacturationSansM, unionFSM435145 union(byName: true)~> union2",
				"union2 select(mapColumn(",
				"          Org_commerciale,",
				"          {Canal distribution},",
				"          {Secteur d'activité},",
				"          {Document de vente},",
				"          Poste,",
				"          {Jour calendaire},",
				"          {Agence commerciale corrigé},",
				"          {ATC Corrigé},",
				"          {Donneur d'ordre},",
				"          {Recept de march},",
				"          {Destinataire facture},",
				"          {Type doc vente},",
				"          {Type de poste},",
				"          Livraison,",
				"          {Type de livraison},",
				"          {Type poste Livraison},",
				"          Facture,",
				"          {Type de facture},",
				"          {Type poste Facture},",
				"          {Mois calendrier},",
				"          {Année civile},",
				"          {Motif commande},",
				"          {CA cdé},",
				"          {Qté livrée},",
				"          {CA livré},",
				"          {Qté facturée},",
				"          {CA facturé},",
				"          {Cout standard cdé},",
				"          {Cout fabrication},",
				"          {Cout standard livré},",
				"          {Cout standard facturé},",
				"          date_id,",
				"          year,",
				"          yearmonth,",
				"          qt_cd_e,",
				"          ca_cd_,",
				"          qt_factur_e,",
				"          ca_factur_,",
				"          year_month,",
				"          reference,",
				"          WholeSalerID,",
				"          WholeSalerHubID,",
				"          HubName,",
				"          HubSAPid,",
				"          POSSAMidString,",
				"          {Période},",
				"          Offre,",
				"          data_origin",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> endFactSansMatching",
				"clearColumnAVM5145, clearColAVM43 union(byName: true)~> union3",
				"derivedColumn15 select(mapColumn(",
				"          Org_commerciale,",
				"          {Canal distribution},",
				"          {Secteur d'activité},",
				"          {Document de vente},",
				"          Poste,",
				"          {Jour calendaire},",
				"          {Agence commerciale corrigé},",
				"          {ATC Corrigé},",
				"          {Donneur d'ordre},",
				"          {Recept de march},",
				"          {Destinataire facture},",
				"          {Type doc vente},",
				"          {Type de poste},",
				"          Livraison,",
				"          {Type de livraison},",
				"          {Type poste Livraison},",
				"          Facture,",
				"          {Type de facture},",
				"          {Type poste Facture},",
				"          {Mois calendrier},",
				"          {Année civile},",
				"          {Motif commande},",
				"          {CA cdé},",
				"          {Qté livrée},",
				"          {CA livré},",
				"          {Qté facturée},",
				"          {CA facturé},",
				"          {Cout standard cdé},",
				"          {Cout fabrication},",
				"          {Cout standard livré},",
				"          {Cout standard facturé},",
				"          date_id,",
				"          qt_cd_e,",
				"          ca_cd_,",
				"          qt_livr_e,",
				"          qt_factur_e,",
				"          ca_factur_,",
				"          WholeSalerID,",
				"          WholeSalerHubID,",
				"          HubName,",
				"          {Période},",
				"          Offre,",
				"          yearmonth,",
				"          year,",
				"          month,",
				"          qte_ecoulement,",
				"          POSSAMidString,",
				"          HubSAPid,",
				"          reference,",
				"          distributeur,",
				"          agence_code,",
				"          marque,",
				"          {Code postal},",
				"          marque_name,",
				"          qte_ecc,",
				"          ca_ecoulement,",
				"          data_origin",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> endAVM434551",
				"clearColumnsAvecMatchig42, endAVM434551 union(byName: true)~> union4",
				"union4 select(mapColumn(",
				"          Org_commerciale,",
				"          {Canal distribution},",
				"          {Secteur d'activité},",
				"          {Document de vente},",
				"          Poste,",
				"          {Jour calendaire},",
				"          {Agence commerciale corrigé},",
				"          {ATC Corrigé},",
				"          {Donneur d'ordre},",
				"          {Recept de march},",
				"          {Destinataire facture},",
				"          {Type doc vente},",
				"          {Type de poste},",
				"          Livraison,",
				"          {Type de livraison},",
				"          {Type poste Livraison},",
				"          Facture,",
				"          {Type de facture},",
				"          {Type poste Facture},",
				"          {Mois calendrier},",
				"          {Année civile},",
				"          {Motif commande},",
				"          {CA cdé},",
				"          {Qté livrée},",
				"          {CA livré},",
				"          {Qté facturée},",
				"          {CA facturé},",
				"          {Cout standard cdé},",
				"          {Cout fabrication},",
				"          {Cout standard livré},",
				"          {Cout standard facturé},",
				"          date_id,",
				"          year,",
				"          yearmonth,",
				"          qt_cd_e,",
				"          ca_cd_,",
				"          qt_factur_e,",
				"          ca_factur_,",
				"          reference,",
				"          WholeSalerID,",
				"          WholeSalerHubID,",
				"          HubName,",
				"          {Période},",
				"          Offre,",
				"          month,",
				"          qte_ecoulement,",
				"          POSSAMidString,",
				"          HubSAPid,",
				"          distributeur,",
				"          agence_code,",
				"          marque,",
				"          {Code postal},",
				"          marque_name,",
				"          qte_ecc,",
				"          ca_ecoulement,",
				"          data_origin,",
				"          Org_commerciale",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> endFactAVM",
				"union3 derive(ca_ecoulement = toDouble(ca_ecoulement),",
				"          qte_ecc = toInteger(qte_ecc),",
				"          {Qté facturée} = toInteger({Qté facturée})) ~> derivedColumn15",
				"clearEcoulementSansMatch select(mapColumn(",
				"          yearmonth,",
				"          year,",
				"          month,",
				"          qte_ecoulement,",
				"          POSSAMidString,",
				"          HubSAPid,",
				"          reference,",
				"          distributeur,",
				"          agence_code,",
				"          marque,",
				"          {Code postal},",
				"          marque_name,",
				"          {Ecoulement origin},",
				"          qte_ecc,",
				"          ca_ecoulement,",
				"          data_origin",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> endEcoulementSansMatcing",
				"derivedColumn16, endFactSansMatching union(byName: true)~> union5",
				"union5 select(mapColumn(",
				"          Org_commerciale,",
				"          {Canal distribution},",
				"          {Secteur d'activité},",
				"          {Document de vente},",
				"          Poste,",
				"          {Jour calendaire},",
				"          {Agence commerciale corrigé},",
				"          {ATC Corrigé},",
				"          {Donneur d'ordre},",
				"          {Recept de march},",
				"          {Destinataire facture},",
				"          {Type doc vente},",
				"          {Type de poste},",
				"          Livraison,",
				"          {Type de livraison},",
				"          {Type poste Livraison},",
				"          Facture,",
				"          {Type de facture},",
				"          {Type poste Facture},",
				"          {Mois calendrier},",
				"          {Année civile},",
				"          {Motif commande},",
				"          {CA cdé},",
				"          {Qté livrée},",
				"          {CA livré},",
				"          {Qté facturée},",
				"          {CA facturé},",
				"          {Cout standard cdé},",
				"          {Cout fabrication},",
				"          {Cout standard livré},",
				"          {Cout standard facturé},",
				"          date_id,",
				"          year,",
				"          yearmonth,",
				"          qt_cd_e,",
				"          ca_cd_,",
				"          qt_factur_e,",
				"          ca_factur_,",
				"          reference,",
				"          WholeSalerID,",
				"          WholeSalerHubID,",
				"          HubName,",
				"          {Période},",
				"          Offre,",
				"          month,",
				"          qte_ecoulement,",
				"          POSSAMidString,",
				"          HubSAPid,",
				"          distributeur,",
				"          agence_code,",
				"          marque,",
				"          {Code postal},",
				"          marque_name,",
				"          qte_ecc,",
				"          ca_ecoulement,",
				"          data_origin,",
				"          year_month",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select10",
				"endFactAVM derive({Qté facturée} = toInteger({Qté facturée})) ~> derivedColumn16",
				"select10, endEcoulementSansMatcing union(byName: true)~> union6",
				"aggregate1 select(mapColumn(",
				"          Offre,",
				"          {ATC performance} = CodeATC,",
				"          Canal",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> endOffreATC",
				"derivedColumn20, endOffreATC join(unionDecrementation@Offre == endOffreATC@Offre",
				"     && canal_final == Canal,",
				"     joinType:'left',",
				"     broadcast: 'auto')~> join9",
				"REcoulement5145 derive(periode = split(indexcols2,'-')[2]) ~> derivedColumn17",
				"select8 derive(indexcols2 = year+\"-\"+{Période}+\"-\"+HubSAPid+\"-\"+ref2+\"-\"+toString(indexcol2),",
				"          {Qté facturée} = iif(toDouble({Qté facturée})<=0, -1, 1)) ~> derivedColumn18",
				"derivedColumn11 select(mapColumn(",
				"          E_yearmonth = yearmonth,",
				"          E_year = year,",
				"          E_month = month,",
				"          qte_ecoulement,",
				"          POSSAMidString,",
				"          HubSAPid,",
				"          reference,",
				"          distributeur,",
				"          agence_code,",
				"          marque,",
				"          {Code postal},",
				"          marque_name,",
				"          toreplicate,",
				"          {Ecoulement origin},",
				"          qte_ecc,",
				"          ca_ecoulement,",
				"          periode,",
				"          ref2,",
				"          indexcols2",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select11",
				"derivedColumn18 select(mapColumn(",
				"          { Org commerciale},",
				"          {Canal distribution},",
				"          {Secteur d'activité},",
				"          {Document de vente},",
				"          Poste,",
				"          {Jour calendaire},",
				"          {Agence commerciale corrigé},",
				"          {ATC Corrigé},",
				"          {Donneur d'ordre},",
				"          {Recept de march},",
				"          {Destinataire facture},",
				"          {Type doc vente},",
				"          {Type de poste},",
				"          Livraison,",
				"          {Type de livraison},",
				"          {Type poste Livraison},",
				"          Facture,",
				"          {Type de facture},",
				"          {Type poste Facture},",
				"          {Mois calendrier},",
				"          {Année civile},",
				"          {Motif commande},",
				"          {CA cdé},",
				"          {Qté livrée},",
				"          {CA livré},",
				"          {Qté facturée},",
				"          {CA facturé},",
				"          {Cout standard cdé},",
				"          {Cout fabrication},",
				"          {Cout standard livré},",
				"          {Cout standard facturé},",
				"          date_id,",
				"          year,",
				"          yearmonth,",
				"          qt_cd_e,",
				"          ca_cd_,",
				"          { Org comqtmerciale},",
				"          qt_factur_e,",
				"          ca_factur_,",
				"          year_month,",
				"          reference,",
				"          WholeSalerID,",
				"          WholeSalerHubID,",
				"          HubName,",
				"          HubSAPid,",
				"          POSSAMidString,",
				"          toreplicate,",
				"          toroll,",
				"          {Période},",
				"          Offre,",
				"          {Facturation origin},",
				"          ref2,",
				"          indexcols2",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select12",
				"caEcoulement select(mapColumn(",
				"          E_yearmonth,",
				"          E_year,",
				"          E_month,",
				"          qte_ecoulement,",
				"          POSSAMidString,",
				"          HubSAPid,",
				"          reference,",
				"          distributeur,",
				"          agence_code,",
				"          marque,",
				"          {Code postal},",
				"          marque_name,",
				"          toreplicate,",
				"          {Ecoulement origin},",
				"          qte_ecc,",
				"          ca_ecoulement,",
				"          periode,",
				"          ref2,",
				"          indexcols2",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> ecoulementReste",
				"stgOffre aggregate(groupBy(Offre,",
				"          Canal),",
				"     CodeATC = last(CodeATC)) ~> aggregate1",
				"join1 derive(canal_final = iif( {Canal distribution}==\"43\" ,  \"Chantier\" , \"Diffus\" )) ~> derivedColumn19",
				"unionDecrementation derive(canal_final = iif( {Canal distribution}==\"43\" ,  \"Chantier\" , \"Diffus\" ),",
				"          month = coalesce(month, right(yearmonth,2) )) ~> derivedColumn20",
				"join9 select(mapColumn(",
				"          Org_commerciale,",
				"          {Canal distribution},",
				"          {Secteur d'activité},",
				"          {Document de vente},",
				"          Poste,",
				"          {Jour calendaire},",
				"          {Agence commerciale corrigé},",
				"          {ATC Corrigé},",
				"          {Donneur d'ordre},",
				"          {Recept de march},",
				"          {Destinataire facture},",
				"          {Type doc vente},",
				"          {Type de poste},",
				"          Livraison,",
				"          {Type de livraison},",
				"          {Type poste Livraison},",
				"          Facture,",
				"          {Type de facture},",
				"          {Type poste Facture},",
				"          {Mois calendrier},",
				"          {Année civile},",
				"          {Motif commande},",
				"          {CA cdé},",
				"          {Qté livrée},",
				"          {CA livré},",
				"          {Qté facturée},",
				"          {CA facturé},",
				"          {Cout standard cdé},",
				"          {Cout fabrication},",
				"          {Cout standard livré},",
				"          {Cout standard facturé},",
				"          date_id,",
				"          year,",
				"          yearmonth,",
				"          qt_cd_e,",
				"          ca_cd_,",
				"          qt_factur_e,",
				"          ca_factur_,",
				"          reference,",
				"          WholeSalerID,",
				"          WholeSalerHubID,",
				"          HubName,",
				"          {Période},",
				"          Offre = unionDecrementation@Offre,",
				"          month,",
				"          qte_ecoulement,",
				"          POSSAMidString,",
				"          HubSAPid,",
				"          distributeur,",
				"          agence_code,",
				"          marque,",
				"          {Code postal},",
				"          marque_name,",
				"          qte_ecc,",
				"          ca_ecoulement,",
				"          data_origin,",
				"          {Ecoulement origin},",
				"          canal_final,",
				"          Offre = endOffreATC@Offre,",
				"          {ATC performance},",
				"          Canal",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select13",
				"filter4 aggregate({Qté facturée} = sum( toInteger({Qté facturée}) )) ~> aggregate2",
				"derivedColumn18 aggregate({Qté facturée} = sum(toInteger({Qté facturée})),",
				"          column1 = sum(1)) ~> aggregate3",
				"adddataOriginAvecMatchin aggregate(col1 = sum(1)) ~> aggregate4",
				"derivedColumn2 aggregate(totalQteFactuter = sum(toInteger({Qté facturée}))) ~> aggregate5",
				"filter3 aggregate(qte4251 = sum(toInteger({Qté facturée}))) ~> aggregate6",
				"select13 derive(distributeur = coalesce(lower(distributeur),iif(lower(WholeSalerID)=='ancs - accueil négoce chauffage sanitaire','partedis', iif(instr(lower(WholeSalerID), 'trva - tereva' )>0, 'tereva', iif(instr(lower(WholeSalerID), 'dsc')>0, 'dsc', iif(instr(lower(WholeSalerID), 'vf' )>0, 'vf_confort', iif(instr(lower(WholeSalerID), 'sonac' )>0, 'sonac',lower(WholeSalerID))))))),",
				"          marque_id = iif(data_origin == \"écoulement sans matching\",marque,Org_commerciale)) ~> derivedColumn21",
				"derivedColumn21 derive(marque_name = iif(marque_id=='1604', \"SaunierDuval\", iif(marque_id=='1621', \"Vaillant\", \"\")),",
				"          {Canal distribution} = iif(data_origin == \"écoulement sans matching\",\"42\",{Canal distribution}),",
				"          ca_final = iif(data_origin == \"écoulement sans matching\" ,toString(ca_ecoulement),toString({CA facturé})),",
				"          qt_final = iif(data_origin == \"écoulement sans matching\" ,toString(qte_ecc),toString({Qté facturée}))) ~> derivedColumn22",
				"derivedColumn22 derive(canal_final = iif({Canal distribution} ==\"43\",\"Chantier\",\"Diffus\")) ~> derivedColumn23",
				"refAtc aggregate(groupBy(Marque,",
				"          {Canal final},",
				"          {Code postal}),",
				"     ATC = max(ATC),",
				"          NomATC = max(NomATC),",
				"          Matricule = max(Matricule)) ~> aggregate8",
				"aggregate8 derive({Code postal} = toInteger({Code postal})) ~> derivedColumn24",
				"derivedColumn24 select(mapColumn(",
				"          Marque,",
				"          {Canal final},",
				"          {Code postal},",
				"          ATC,",
				"          NomATC,",
				"          Matricule",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> endATC",
				"derivedColumn23, endATC join(marque_name == endATC@Marque",
				"     && canal_final == {Canal final}",
				"     && iif(data_origin==\"decrementation ecoulement sans matching\", -5, toInteger(select13@{Code postal})) == endATC@{Code postal},",
				"     joinType:'left',",
				"     broadcast: 'auto')~> join10",
				"join10 select(mapColumn(",
				"          yearmonth,",
				"          year,",
				"          month,",
				"          qte_ecoulement,",
				"          ca_ecoulement,",
				"          POSSAMidString,",
				"          HubSAPid,",
				"          reference,",
				"          distributeur,",
				"          agence_code,",
				"          marque_id,",
				"          {Code postal} = select13@{Code postal},",
				"          marque_name,",
				"          {Canal distribution},",
				"          {Secteur d'activité},",
				"          {Document de vente},",
				"          {Jour calendaire},",
				"          {Agence commerciale corrigé},",
				"          {ATC Corrigé},",
				"          {Donneur d'ordre},",
				"          {Recept de march},",
				"          {Type doc vente},",
				"          {Type de poste},",
				"          Livraison,",
				"          {Type de livraison},",
				"          {Type poste Livraison},",
				"          Facture,",
				"          {Type poste Facture},",
				"          {Motif commande},",
				"          {Qté facturée},",
				"          {CA facturé},",
				"          no_offre = Offre,",
				"          ca_final,",
				"          qt_final,",
				"          data_origin,",
				"          canal_final,",
				"          {ATC performance},",
				"          ATC,",
				"          NomATC,",
				"          Matricule",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select14",
				"endEcoulementSansMatcing derive(POSSAMidString = HubSAPid,",
				"          qte_ecc = -1*toDouble(qte_ecc),",
				"          ca_ecoulement = -1*toDouble(ca_ecoulement),",
				"          data_origin = \"decrementation ecoulement sans matching\") ~> endDecrementation",
				"union6, endDecrementation union(byName: true)~> unionDecrementation",
				"derivedColumn3 filter(POSSAMidString==\"16001050\" && reference ==\"0010021498\" && year=='2021') ~> filter6",
				"derivedColumn2 filter(POSSAMidString==\"16001050\" && reference==\"0010021498\" && year=='2021') ~> ftest",
				"createIndexPartedis filter(POSSAMidString==\"16001050\" && ref2==\"10021498\" && year=='2021') ~> filter7",
				"select1 aggregate(groupBy(Offre,",
				"          Canal),",
				"     {Numéro interne 2} = max({Numéro interne 2})) ~> aggregate9",
				"ecoulementReste aggregate(qte_ecc = sum(toFloat(qte_ecc))) ~> aggregate10",
				"REcoulement5145 aggregate(qte_ecc = sum(toFloat(qte_ecc))) ~> aggregate11",
				"ResteEcoulement aggregate(qte_ecc = sum(toFloat(qte_ecc))) ~> aggregate12",
				"derivedColumn11 aggregate(qte_ecc = sum(toFloat(qte_ecc))) ~> aggregate13",
				"select3 aggregate(Qt = sum(toFloat({Qté facturée}))) ~> aggregate14",
				"FacturationForOther aggregate(groupBy(WholeSalerID),",
				"     {Qté facturée} = sum(toFloat({Qté facturée}))) ~> aggregate15",
				"derivedColumn5 aggregate({Qté facturée} = sum(toInteger({Qté facturée}))) ~> aggregate16",
				"Filtre5145 aggregate({Qté facturée} = sum(toInteger({Qté facturée}))) ~> aggregate17",
				"Filtre43 aggregate({Qté facturée} = sum(toInteger({Qté facturée}))) ~> aggregate18",
				"select5 aggregate({Qté facturée} = sum(toInteger({Qté facturée}))) ~> aggregate19",
				"addDataOriginFM aggregate({Qté facturée} = sum(toInteger({Qté facturée}))) ~> aggregate20",
				"clearColFacturationSM43 aggregate({Qté facturée} = sum(toInteger({Qté facturée}))) ~> aggregate21",
				"join7 aggregate({Qté facturée} = sum(toInteger({Qté facturée}))) ~> aggregate22",
				"addDataOriginAvecMathcin4551 aggregate({Qté facturée} = sum(toInteger({Qté facturée}))) ~> aggregate23",
				"addDataOriginFSM aggregate({Qté facturée} = sum(toInteger({Qté facturée}))) ~> aggregate24",
				"aggregate13 select(mapColumn(",
				"          qte_ecc",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select15",
				"derivedColumn15 aggregate({Qté facturée} = sum(toInteger({Qté facturée}))) ~> aggregate25",
				"unionFSM435145 aggregate({Qté facturée} = sum(toInteger({Qté facturée}))) ~> aggregate26",
				"select13 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     partitionFileNames:['tempVenteDeroge.csv'],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> endSinkOutput",
				"clearColFacturationSM43 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          {affecte/non_affecte;plateforme/vente directe;origine de la ligne;year;month;Code client livr�;code client plateforme livree;code produit;quantite;ca;Code postal du client livr�;marque;ID marque;ID canal de distribution;Nom du canal;Diffus/Chantier;document_vente (vente directe);Agence commerciale corrig� (vente directe);Donneur d'ordre (vente directe);Facture (vente directe);Type poste Facture (vente directe);Num�ro offre;ATC Corrig� (vente directe);ATC offre;ATC livr�;DR (ATC Performance);ATC Performance;NomATC;Motif commande (vente directe);Type de facture (vente directe);Description;N1groupe;N2groupe;N3groupe;N4groupe;N5groupe;N6groupe;N7groupe;N1groupedesignation;N2groupedesignation;N3groupedesignation;N4groupedesignation;N5groupedesignation;N6groupedesignation;N7groupedesignation;N1localedesignation;N2localedesignation;N3localedesignation;N4localedesignation;N5localedesignation;N6localedesignation;N7localedesignation;N1locale;N2locale;N3locale;N4locale;N5locale;N6locale;N7locale;Hi�rarchgroupe;Hi�rarchlocale;Client_direct_Nom du compte;Client direct_Groupe cible/Typologie g�n�rale;Client direct_Sous groupe cible/Typologie d�taill�e;Client direct_Compte principal: Num�ro du compte;Client direct_Compte principal: Nom du compte;Client;Num�ro client indirect;CODE_CMI;NOM_CMI;Nom du compte;Client Indirect_ Groupe cible/Typologie g�n�rale;Client Indirect_ Sous groupe cible/Typologie d�taill�e;Client Indirect_  Compte principal: Num�ro du compte;Client Indirect_  Compte principal: Nom du compte;Client Direct - Hi�rarchie N1 SAP ;Client Direct - Hi�rarchie N2 SAP ;Client Indirect - Hi�rarchie N1 SAP;Client Indirect - Hi�rarchie N2 SAP} as string",
				"     ),",
				"     partitionFileNames:['ventederogeAnalysis.csv'],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> sink1",
				"clearColAVM43 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          {affecte/non_affecte;plateforme/vente directe;origine de la ligne;year;month;Code client livr�;code client plateforme livree;code produit;quantite;ca;Code postal du client livr�;marque;ID marque;ID canal de distribution;Nom du canal;Diffus/Chantier;document_vente (vente directe);Agence commerciale corrig� (vente directe);Donneur d'ordre (vente directe);Facture (vente directe);Type poste Facture (vente directe);Num�ro offre;ATC Corrig� (vente directe);ATC offre;ATC livr�;DR (ATC Performance);ATC Performance;NomATC;Motif commande (vente directe);Type de facture (vente directe);Description;N1groupe;N2groupe;N3groupe;N4groupe;N5groupe;N6groupe;N7groupe;N1groupedesignation;N2groupedesignation;N3groupedesignation;N4groupedesignation;N5groupedesignation;N6groupedesignation;N7groupedesignation;N1localedesignation;N2localedesignation;N3localedesignation;N4localedesignation;N5localedesignation;N6localedesignation;N7localedesignation;N1locale;N2locale;N3locale;N4locale;N5locale;N6locale;N7locale;Hi�rarchgroupe;Hi�rarchlocale;Client_direct_Nom du compte;Client direct_Groupe cible/Typologie g�n�rale;Client direct_Sous groupe cible/Typologie d�taill�e;Client direct_Compte principal: Num�ro du compte;Client direct_Compte principal: Nom du compte;Client;Num�ro client indirect;CODE_CMI;NOM_CMI;Nom du compte;Client Indirect_ Groupe cible/Typologie g�n�rale;Client Indirect_ Sous groupe cible/Typologie d�taill�e;Client Indirect_  Compte principal: Num�ro du compte;Client Indirect_  Compte principal: Nom du compte;Client Direct - Hi�rarchie N1 SAP ;Client Direct - Hi�rarchie N2 SAP ;Client Indirect - Hi�rarchie N1 SAP;Client Indirect - Hi�rarchie N2 SAP} as string",
				"     ),",
				"     partitionFileNames:['factorationAVM43.csv'],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> sink2",
				"unionFSM435145 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          {affecte/non_affecte;plateforme/vente directe;origine de la ligne;year;month;Code client livr�;code client plateforme livree;code produit;quantite;ca;Code postal du client livr�;marque;ID marque;ID canal de distribution;Nom du canal;Diffus/Chantier;document_vente (vente directe);Agence commerciale corrig� (vente directe);Donneur d'ordre (vente directe);Facture (vente directe);Type poste Facture (vente directe);Num�ro offre;ATC Corrig� (vente directe);ATC offre;ATC livr�;DR (ATC Performance);ATC Performance;NomATC;Motif commande (vente directe);Type de facture (vente directe);Description;N1groupe;N2groupe;N3groupe;N4groupe;N5groupe;N6groupe;N7groupe;N1groupedesignation;N2groupedesignation;N3groupedesignation;N4groupedesignation;N5groupedesignation;N6groupedesignation;N7groupedesignation;N1localedesignation;N2localedesignation;N3localedesignation;N4localedesignation;N5localedesignation;N6localedesignation;N7localedesignation;N1locale;N2locale;N3locale;N4locale;N5locale;N6locale;N7locale;Hi�rarchgroupe;Hi�rarchlocale;Client_direct_Nom du compte;Client direct_Groupe cible/Typologie g�n�rale;Client direct_Sous groupe cible/Typologie d�taill�e;Client direct_Compte principal: Num�ro du compte;Client direct_Compte principal: Nom du compte;Client;Num�ro client indirect;CODE_CMI;NOM_CMI;Nom du compte;Client Indirect_ Groupe cible/Typologie g�n�rale;Client Indirect_ Sous groupe cible/Typologie d�taill�e;Client Indirect_  Compte principal: Num�ro du compte;Client Indirect_  Compte principal: Nom du compte;Client Direct - Hi�rarchie N1 SAP ;Client Direct - Hi�rarchie N2 SAP ;Client Indirect - Hi�rarchie N1 SAP;Client Indirect - Hi�rarchie N2 SAP} as string",
				"     ),",
				"     partitionFileNames:['factorationAVM435145.vdb'],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> sink3",
				"select14 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     partitionFileNames:['OModelPartedis.csv'],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> sink4",
				"Filtre43 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          Org_commerciale as string,",
				"          {Canal distribution} as string,",
				"          {Secteur d'activit�} as string,",
				"          {Document de vente} as string,",
				"          Poste as string,",
				"          {Jour calendaire} as string,",
				"          {Agence commerciale corrig�} as string,",
				"          {ATC Corrig�} as string,",
				"          {Donneur d'ordre} as string,",
				"          {Recept de march} as string,",
				"          {Destinataire facture} as string,",
				"          {Type doc vente} as string,",
				"          {Type de poste} as string,",
				"          Livraison as string,",
				"          {Type de livraison} as string,",
				"          {Type poste Livraison} as string,",
				"          Facture as string,",
				"          {Type de facture} as string,",
				"          {Type poste Facture} as string,",
				"          {Mois calendrier} as string,",
				"          {Ann�e civile} as string,",
				"          {Motif commande} as string,",
				"          {CA cd�} as string,",
				"          {Qt� livr�e} as string,",
				"          {CA livr�} as string,",
				"          {Qt� factur�e} as string,",
				"          {CA factur�} as string,",
				"          {Cout standard cd�} as string,",
				"          {Cout fabrication} as string,",
				"          {Cout standard livr�} as string,",
				"          {Cout standard factur�} as string,",
				"          date_id as string,",
				"          year as string,",
				"          yearmonth as string,",
				"          qt_cd_e as string,",
				"          ca_cd_ as string,",
				"          qt_factur_e as string,",
				"          ca_factur_ as string,",
				"          reference as string,",
				"          WholeSalerID as string,",
				"          WholeSalerHubID as string,",
				"          HubName as string,",
				"          {P�riode} as string,",
				"          Offre as string,",
				"          month as string,",
				"          qte_ecoulement as string,",
				"          POSSAMidString as string,",
				"          HubSAPid as string,",
				"          distributeur as string,",
				"          agence_code as string,",
				"          marque as string,",
				"          {Code postal} as string,",
				"          marque_name as string,",
				"          qte_ecc as string,",
				"          ca_ecoulement as string,",
				"          data_origin as string,",
				"          {Ecoulement origin} as string,",
				"          canal_final as string,",
				"          {ATC performance} as string,",
				"          Canal as string",
				"     ),",
				"     partitionFileNames:['TestFacturation43.csv'],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> sinkFact43",
				"select3 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          Org_commerciale as string,",
				"          {Canal distribution} as string,",
				"          {Secteur d'activit�} as string,",
				"          {Document de vente} as string,",
				"          Poste as string,",
				"          {Jour calendaire} as string,",
				"          {Agence commerciale corrig�} as string,",
				"          {ATC Corrig�} as string,",
				"          {Donneur d'ordre} as string,",
				"          {Recept de march} as string,",
				"          {Destinataire facture} as string,",
				"          {Type doc vente} as string,",
				"          {Type de poste} as string,",
				"          Livraison as string,",
				"          {Type de livraison} as string,",
				"          {Type poste Livraison} as string,",
				"          Facture as string,",
				"          {Type de facture} as string,",
				"          {Type poste Facture} as string,",
				"          {Mois calendrier} as string,",
				"          {Ann�e civile} as string,",
				"          {Motif commande} as string,",
				"          {CA cd�} as string,",
				"          {Qt� livr�e} as string,",
				"          {CA livr�} as string,",
				"          {Qt� factur�e} as string,",
				"          {CA factur�} as string,",
				"          {Cout standard cd�} as string,",
				"          {Cout fabrication} as string,",
				"          {Cout standard livr�} as string,",
				"          {Cout standard factur�} as string,",
				"          date_id as string,",
				"          year as string,",
				"          yearmonth as string,",
				"          qt_cd_e as string,",
				"          ca_cd_ as string,",
				"          qt_factur_e as string,",
				"          ca_factur_ as string,",
				"          reference as string,",
				"          WholeSalerID as string,",
				"          WholeSalerHubID as string,",
				"          HubName as string,",
				"          {P�riode} as string,",
				"          Offre as string,",
				"          month as string,",
				"          qte_ecoulement as string,",
				"          POSSAMidString as string,",
				"          HubSAPid as string,",
				"          distributeur as string,",
				"          agence_code as string,",
				"          marque as string,",
				"          {Code postal} as string,",
				"          marque_name as string,",
				"          qte_ecc as string,",
				"          ca_ecoulement as string,",
				"          data_origin as string,",
				"          {Ecoulement origin} as string,",
				"          canal_final as string,",
				"          {ATC performance} as string,",
				"          Canal as string",
				"     ),",
				"     partitionFileNames:['TestAfterArticulationOffreJoin.csv'],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> sinkAfterArticulatioOffreJoin"
			]
		}
	}
}