{
	"name": "cleaning",
	"properties": {
		"description": "cleaning process after join",
		"folder": {
			"name": "REFERENTIEL/ATC"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "atc_lower",
						"type": "DatasetReference"
					},
					"name": "atcJoined"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "outReferentielATC",
						"type": "DatasetReference"
					},
					"name": "AtcprepareForReplicate"
				}
			],
			"transformations": [
				{
					"name": "Select1"
				},
				{
					"name": "DerivedColumn1"
				},
				{
					"name": "Filter2"
				},
				{
					"name": "DerivedColumn2"
				},
				{
					"name": "Flatten1"
				},
				{
					"name": "DerivedColumn3"
				},
				{
					"name": "DerivedColumn4"
				},
				{
					"name": "Filter3"
				}
			],
			"script": "source(output(\n\t\t{Clé Référentiel} as string,\n\t\t{Recherche Clé EPS} as string,\n\t\tMarque as string,\n\t\t{Code Postal début} as integer,\n\t\t{Code Postal fin} as integer,\n\t\tUtilisateur as string,\n\t\tFonction as string,\n\t\t{Département} as string,\n\t\tDR as string,\n\t\t{ID SAP} as string,\n\t\t{Diffus/Chantier} as string,\n\t\t{Plan prime} as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false) ~> atcJoined\natcJoined select(mapColumn(\n\t\t{Clé Référentiel},\n\t\t{Recherche Clé EPS},\n\t\tMarque,\n\t\t{Code Postal début},\n\t\t{Code Postal fin},\n\t\tUtilisateur,\n\t\tFonction,\n\t\t{Département},\n\t\tATC = {ID SAP},\n\t\tNomATC = Utilisateur,\n\t\t{Plan primes} = {Plan prime},\n\t\tMatricule = {ID SAP}\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select1\nFilter3 derive({Canal final} = iif( in([\"Vaillant diffus\",\"SD diffus\",\"Diffus\"], {Plan primes}), \"Diffus\" ,\"Chantier\" ),\n\t\ttoreplicate = {Code Postal fin}-{Code Postal début}+1) ~> DerivedColumn1\nDerivedColumn1 filter({Code Postal début}<= {Code Postal fin}) ~> Filter2\nFilter2 derive(dd = mapLoop(abs(toInteger(toreplicate)), #index)) ~> DerivedColumn2\nDerivedColumn2 foldDown(unroll(dd, dd),\n\tmapColumn(\n\t\tMarque,\n\t\t{Code Postal début},\n\t\t{Code Postal fin},\n\t\tUtilisateur,\n\t\tFonction,\n\t\t{Département},\n\t\tATC,\n\t\tNomATC = Utilisateur,\n\t\t{Plan primes},\n\t\tMatricule = ATC,\n\t\t{Canal final},\n\t\ttoreplicate,\n\t\tdd\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> Flatten1\nFlatten1 derive(dd = toInteger(dd) -1) ~> DerivedColumn3\nDerivedColumn3 derive({Code postal} = {Code Postal début}+dd) ~> DerivedColumn4\nSelect1 filter(!isNull(ATC)) ~> Filter3\nDerivedColumn4 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tpartitionFileNames:['referentiel_atc.csv'],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tpartitionBy('hash', 1)) ~> AtcprepareForReplicate"
		}
	}
}