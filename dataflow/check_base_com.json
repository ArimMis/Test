{
	"name": "check_base_com",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "InputBaseCommercialMarketing",
						"type": "DatasetReference"
					},
					"name": "source1"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "outtest",
						"type": "DatasetReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "derivedColumn1"
				},
				{
					"name": "aggregate1"
				},
				{
					"name": "derivedColumn5"
				},
				{
					"name": "filter1"
				},
				{
					"name": "filter2"
				},
				{
					"name": "aggregate4"
				},
				{
					"name": "derivedColumn6"
				},
				{
					"name": "filter3"
				},
				{
					"name": "filter4"
				},
				{
					"name": "derivedColumn7"
				},
				{
					"name": "filter5"
				},
				{
					"name": "aggregate5"
				},
				{
					"name": "derivedColumn8"
				},
				{
					"name": "filter6"
				},
				{
					"name": "aggregate6"
				}
			],
			"scriptLines": [
				"source(output(",
				"          {affecte/non_affecte} as string,",
				"          {plateforme/vente directe} as string,",
				"          {origine de la ligne} as string,",
				"          year as string,",
				"          month as string,",
				"          {Code client livré} as string,",
				"          {code client plateforme livree} as string,",
				"          {code produit} as string,",
				"          quantite as string,",
				"          ca as string,",
				"          {Code postal} as string,",
				"          marque as string,",
				"          marque_code as string,",
				"          canal_distribution_final as string,",
				"          {nom du canal} as string,",
				"          canal_final as string,",
				"          document_vente as string,",
				"          {Agence commerciale corrigé (vente directe)} as string,",
				"          {Donneur d'ordre (vente directe)} as string,",
				"          {Facture (vente directe)} as string,",
				"          {Type poste Facture (vente directe)} as string,",
				"          no_offre as string,",
				"          {ATC offre} as string,",
				"          {ATC livré} as string,",
				"          {ATC Performance} as string,",
				"          NomATC as string,",
				"          DR as string,",
				"          Matricule as string,",
				"          {Motif commande} as string,",
				"          {Type de facture} as string,",
				"          Description as string,",
				"          N1groupe as string,",
				"          N2groupe as string,",
				"          N3groupe as string,",
				"          N4groupe as string,",
				"          N5groupe as string,",
				"          N6groupe as string,",
				"          N7groupe as string,",
				"          N1groupedesignation as string,",
				"          N2groupedesignation as string,",
				"          N3groupedesignation as string,",
				"          N4groupedesignation as string,",
				"          N5groupedesignation as string,",
				"          N6groupedesignation as string,",
				"          N7groupedesignation as string,",
				"          N1localedesignation as string,",
				"          N2localedesignation as string,",
				"          N3localedesignation as string,",
				"          N4localedesignation as string,",
				"          N5localedesignation as string,",
				"          N6localedesignation as string,",
				"          N7localedesignation as string,",
				"          N1locale as string,",
				"          N2locale as string,",
				"          N3locale as string,",
				"          N4locale as string,",
				"          N5locale as string,",
				"          N6locale as string,",
				"          N7locale as string,",
				"          {Hiérarchgroupe} as string,",
				"          {Hiérarchlocale} as string,",
				"          {Numéro du compte} as string,",
				"          {EPS_Nom du compte} as string,",
				"          {EPS_Groupe cible/Typologie générale} as string,",
				"          {EPS_Sous groupe cible/Typologie détaillée} as string,",
				"          {EPS_Compte principal: Numéro du compte} as string,",
				"          {EPS_Compte principal: Nom du compte} as string,",
				"          Client as string,",
				"          {Numéro client indirect} as string,",
				"          CODE_CMI as string,",
				"          NOM_CMI as string,",
				"          {Nom du compte} as string,",
				"          {Client Indirect_ Groupe cible/Typologie générale} as string,",
				"          {Client Indirect_ Sous groupe cible/Typologie détaillée} as string,",
				"          {Client Indirect_  Compte principal: Numéro du compte} as string,",
				"          {Client Indirect_  Compte principal: Nom du compte} as string,",
				"          {Client Direct - Hiérarchie N1 SAP } as string,",
				"          {Client Direct - Hiérarchie N2 SAP } as string,",
				"          {Client Indirect - Hiérarchie N1 SAP} as string,",
				"          {Client Indirect - Hiérarchie N2 SAP} as string,",
				"          yearmonth as string,",
				"          {ATC Corrigé} as string,",
				"          {Client_direct_Nom du compte} as string,",
				"          {Client direct_Groupe cible/Typologie générale} as string,",
				"          {Client direct_Sous groupe cible/Typologie détaillée} as string,",
				"          {Client direct_Compte principal: Numéro du compte} as string,",
				"          {Client direct_Compte principal: Nom du compte} as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> source1",
				"source1 derive(ca = toDouble(replace(ca,\",\",\".\")),",
				"          quantite = toInteger(quantite),",
				"          column1 = 1) ~> derivedColumn1",
				"filter4 aggregate(groupBy({plateforme/vente directe}),",
				"     ca = sum(toDouble(ca)),",
				"          quantite = sum(toInteger(quantite))) ~> aggregate1",
				"aggregate1 derive(ca = replace(toString(ca),\".\",\",\"),",
				"          quantite = replace(toString(quantite),\".\",\",\")) ~> derivedColumn5",
				"source1 filter(year==\"2021\" && {plateforme/vente directe}==\"plateforme vf\") ~> filter1",
				"filter1 filter({origine de la ligne}==\"facturation sans ecoulement\" || {origine de la ligne}==\"facturation avec matching\") ~> filter2",
				"derivedColumn6 aggregate(groupBy({code produit}),",
				"     nombre = count({code produit})) ~> aggregate4",
				"filter2 derive({code produit} = coalesce(toString(toInteger(replace({code produit}, \" \", \"\"))),replace({code produit}, \" \", \"\"))) ~> derivedColumn6",
				"derivedColumn1 filter(year==\"2021\") ~> filter3",
				"filter3 filter(in([\"facturation sans ecoulement\",\"facturation avec matching\"],{origine de la ligne})) ~> filter4",
				"source1 derive(ca = toDouble(replace(ca,\",\",\".\")),",
				"          quantite = toInteger(quantite),",
				"          column1 = 1) ~> derivedColumn7",
				"derivedColumn7 filter(year == '2021') ~> filter5",
				"filter6 aggregate(groupBy({plateforme/vente directe},",
				"          {origine de la ligne}),",
				"     ca = sum(toDouble(ca)),",
				"          quantite = sum(toInteger(quantite))) ~> aggregate5",
				"aggregate5 derive(ca = replace(toString(ca),\".\",\",\"),",
				"          quantite = replace(toString(quantite),\".\",\",\")) ~> derivedColumn8",
				"filter5 filter(in([\"decrementation ecoulement sans matching\",\"ecoulement sans matching\",\"facturation sans ecoulement\",\"facturation avec matching\"],{origine de la ligne})) ~> filter6",
				"source1 aggregate(groupBy({plateforme/vente directe}),",
				"     vam = sum(1)) ~> aggregate6",
				"aggregate4 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          Column_1 as string",
				"     ),",
				"     partitionFileNames:['test_contratDist.csv'],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> sink1"
			]
		}
	}
}