{
	"name": "CONTRAT_DISTRIBUTION",
	"properties": {
		"folder": {
			"name": "CONTRAT_DISTRIBUTION"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "CALCUL_SEUIL",
						"type": "DatasetReference"
					},
					"name": "seuil"
				},
				{
					"dataset": {
						"referenceName": "CALCUL_REMUNERATION",
						"type": "DatasetReference"
					},
					"name": "remuneration"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "CONTRAT_DISTRIBUTION",
						"type": "DatasetReference"
					},
					"name": "CONTRATDISTRIBUTION"
				}
			],
			"transformations": [
				{
					"name": "innerJoin"
				},
				{
					"name": "remunerationColumn"
				},
				{
					"name": "dropColumns"
				},
				{
					"name": "fullLeftJoin"
				},
				{
					"name": "dropInner"
				},
				{
					"name": "dropColumnsLeft"
				},
				{
					"name": "Union"
				},
				{
					"name": "Sort1"
				}
			],
			"script": "source(output(\n\t\tyear as string,\n\t\t{ID contrat cadre} as string,\n\t\t{ID contrat} as string,\n\t\t{ID levier} as string,\n\t\t{Max ID Seuil} as string,\n\t\t{Contrepartie seuil} as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false) ~> seuil\nsource(output(\n\t\t{ID contrat cadre} as string,\n\t\t{ID contrat} as string,\n\t\t{ID levier} as string,\n\t\tyear as string,\n\t\tca as string,\n\t\t{Réalisé} as string,\n\t\t{Somme quantité} as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false) ~> remuneration\nseuil, remuneration join(seuil@{ID contrat cadre} == remuneration@{ID contrat cadre}\n\t&& seuil@{ID contrat} == remuneration@{ID contrat}\n\t&& seuil@{ID levier} == remuneration@{ID levier}\n\t&& seuil@year == remuneration@year,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> innerJoin\nUnion derive({Rémunération} = toDouble({Réalisé})*toDouble({Contrepartie seuil})) ~> remunerationColumn\ninnerJoin select(mapColumn(\n\t\tyear = seuil@year,\n\t\t{ID contrat cadre} = seuil@{ID contrat cadre},\n\t\t{ID contrat} = seuil@{ID contrat},\n\t\t{ID levier} = seuil@{ID levier},\n\t\t{ID Seuil} = {Max ID Seuil},\n\t\t{Contrepartie seuil},\n\t\tca,\n\t\t{quantité} = {Somme quantité},\n\t\t{Réalisé}\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> dropColumns\nseuil, remuneration join(seuil@{ID contrat cadre} == remuneration@{ID contrat cadre}\n\t&& seuil@{ID contrat} == remuneration@{ID contrat}\n\t&& seuil@{ID levier} == remuneration@{ID levier}\n\t&& seuil@year == remuneration@year,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> fullLeftJoin\nfullLeftJoin filter(isNull(remuneration@{ID contrat cadre}) && isNull(remuneration@{ID contrat}) && isNull(remuneration@{ID levier}) && isNull(remuneration@year)) ~> dropInner\ndropInner select(mapColumn(\n\t\tyear = seuil@year,\n\t\t{ID contrat cadre} = seuil@{ID contrat cadre},\n\t\t{ID contrat} = seuil@{ID contrat},\n\t\t{ID levier} = seuil@{ID levier},\n\t\t{ID Seuil} = {Max ID Seuil},\n\t\t{Contrepartie seuil},\n\t\tca,\n\t\t{Réalisé},\n\t\t{Somme quantité}\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> dropColumnsLeft\ndropColumns, dropColumnsLeft union(byName: true)~> Union\nremunerationColumn sort(asc({ID contrat cadre}, true),\n\tasc({ID contrat}, true),\n\tasc({ID levier}, true),\n\tasc(year, true)) ~> Sort1\nSort1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tpartitionFileNames:['CONTRAT_DISTRIBUTION.csv'],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tpartitionBy('hash', 1)) ~> CONTRATDISTRIBUTION"
		}
	}
}