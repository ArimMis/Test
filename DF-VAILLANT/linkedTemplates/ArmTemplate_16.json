{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "DF-VAILLANT"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/Ventes derogees')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "BASE COMMERCIALE"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "FacturationForOther",
								"type": "DatasetReference"
							},
							"name": "FacturationForOther"
						},
						{
							"dataset": {
								"referenceName": "associationoffre",
								"type": "DatasetReference"
							},
							"name": "ArticulationSap"
						},
						{
							"dataset": {
								"referenceName": "STG_OFFRE_SOURCE",
								"type": "DatasetReference"
							},
							"name": "stgOffre"
						},
						{
							"dataset": {
								"referenceName": "InPrixMoyenSplited",
								"type": "DatasetReference"
							},
							"name": "PrixPeriode"
						},
						{
							"dataset": {
								"referenceName": "ecouPartedisLikeWithIndex",
								"type": "DatasetReference"
							},
							"name": "ecoulmnt"
						},
						{
							"dataset": {
								"referenceName": "ref_atc",
								"type": "DatasetReference"
							},
							"name": "refAtc"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "outVenteDeroge",
								"type": "DatasetReference"
							},
							"name": "endSinkOutput"
						},
						{
							"dataset": {
								"referenceName": "tempFacturactionSM",
								"type": "DatasetReference"
							},
							"name": "sink1"
						},
						{
							"dataset": {
								"referenceName": "factorationAVM43",
								"type": "DatasetReference"
							},
							"name": "sink2"
						},
						{
							"dataset": {
								"referenceName": "factorationAVM43",
								"type": "DatasetReference"
							},
							"name": "sink3"
						},
						{
							"dataset": {
								"referenceName": "outVenteDeroge",
								"type": "DatasetReference"
							},
							"name": "sink4"
						},
						{
							"dataset": {
								"referenceName": "TestFacturation43",
								"type": "DatasetReference"
							},
							"name": "sinkFact43"
						},
						{
							"dataset": {
								"referenceName": "TestAfterArticulationOffreJoin",
								"type": "DatasetReference"
							},
							"name": "sinkAfterArticulatioOffreJoin"
						}
					],
					"transformations": [
						{
							"name": "join1"
						},
						{
							"name": "join2"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "columnChoicePrix"
						},
						{
							"name": "join3"
						},
						{
							"name": "derivedColumn2"
						},
						{
							"name": "derivedColumn3"
						},
						{
							"name": "torolltoList"
						},
						{
							"name": "derivedColumn4"
						},
						{
							"name": "createIndexPartedis"
						},
						{
							"name": "derivedColumn5"
						},
						{
							"name": "select1"
						},
						{
							"name": "select0"
						},
						{
							"name": "select3"
						},
						{
							"name": "Filtre43"
						},
						{
							"name": "join5"
						},
						{
							"name": "endArticulation"
						},
						{
							"name": "endOffre"
						},
						{
							"name": "derivedColumn8"
						},
						{
							"name": "Filtre5145"
						},
						{
							"name": "endEcoulement"
						},
						{
							"name": "split2"
						},
						{
							"name": "REcoulement43"
						},
						{
							"name": "select5"
						},
						{
							"name": "join7"
						},
						{
							"name": "select6"
						},
						{
							"name": "split3"
						},
						{
							"name": "REcoulement5145"
						},
						{
							"name": "filter3"
						},
						{
							"name": "filter4"
						},
						{
							"name": "torolltoList2"
						},
						{
							"name": "derivedColumn9"
						},
						{
							"name": "window1"
						},
						{
							"name": "ResteEcoulement"
						},
						{
							"name": "derivedColumn10"
						},
						{
							"name": "ddToList"
						},
						{
							"name": "window2"
						},
						{
							"name": "select7"
						},
						{
							"name": "derivedColumn11"
						},
						{
							"name": "caEcoulement"
						},
						{
							"name": "join8"
						},
						{
							"name": "select8"
						},
						{
							"name": "select9"
						},
						{
							"name": "split4"
						},
						{
							"name": "adddataOriginAvecMatchin"
						},
						{
							"name": "adddataOriginEccSansMatching"
						},
						{
							"name": "addDataOringFacturation"
						},
						{
							"name": "addDataOriginAvecMathcin4551"
						},
						{
							"name": "addDataOriginFSM"
						},
						{
							"name": "addDataOriginFM"
						},
						{
							"name": "derivedColumn14"
						},
						{
							"name": "clearColumnsAvecMatchig42"
						},
						{
							"name": "clearFacturationSansM"
						},
						{
							"name": "clearEcoulementSansMatch"
						},
						{
							"name": "clearColFacturationSM43"
						},
						{
							"name": "clearColAVM43"
						},
						{
							"name": "clearColumnAVM5145"
						},
						{
							"name": "clearColFSM4551"
						},
						{
							"name": "union1"
						},
						{
							"name": "unionFSM435145"
						},
						{
							"name": "union2"
						},
						{
							"name": "endFactSansMatching",
							"description": "search 1 col"
						},
						{
							"name": "union3"
						},
						{
							"name": "endAVM434551"
						},
						{
							"name": "union4"
						},
						{
							"name": "endFactAVM"
						},
						{
							"name": "derivedColumn15"
						},
						{
							"name": "endEcoulementSansMatcing"
						},
						{
							"name": "union5"
						},
						{
							"name": "select10"
						},
						{
							"name": "derivedColumn16"
						},
						{
							"name": "union6"
						},
						{
							"name": "endOffreATC"
						},
						{
							"name": "join9"
						},
						{
							"name": "derivedColumn17"
						},
						{
							"name": "derivedColumn18"
						},
						{
							"name": "select11"
						},
						{
							"name": "select12"
						},
						{
							"name": "ecoulementReste"
						},
						{
							"name": "aggregate1"
						},
						{
							"name": "derivedColumn19"
						},
						{
							"name": "derivedColumn20"
						},
						{
							"name": "select13"
						},
						{
							"name": "aggregate2"
						},
						{
							"name": "aggregate3"
						},
						{
							"name": "aggregate4"
						},
						{
							"name": "aggregate5"
						},
						{
							"name": "aggregate6"
						},
						{
							"name": "derivedColumn21"
						},
						{
							"name": "derivedColumn22"
						},
						{
							"name": "derivedColumn23"
						},
						{
							"name": "aggregate8"
						},
						{
							"name": "derivedColumn24"
						},
						{
							"name": "endATC"
						},
						{
							"name": "join10"
						},
						{
							"name": "select14"
						},
						{
							"name": "endDecrementation"
						},
						{
							"name": "unionDecrementation"
						},
						{
							"name": "filter6"
						},
						{
							"name": "ftest"
						},
						{
							"name": "filter7"
						},
						{
							"name": "aggregate9"
						},
						{
							"name": "aggregate10"
						},
						{
							"name": "aggregate11"
						},
						{
							"name": "aggregate12"
						},
						{
							"name": "aggregate13"
						},
						{
							"name": "aggregate14"
						},
						{
							"name": "aggregate15"
						},
						{
							"name": "aggregate16"
						},
						{
							"name": "aggregate17"
						},
						{
							"name": "aggregate18"
						},
						{
							"name": "aggregate19"
						},
						{
							"name": "aggregate20"
						},
						{
							"name": "aggregate21"
						},
						{
							"name": "aggregate22"
						},
						{
							"name": "aggregate23"
						},
						{
							"name": "aggregate24"
						},
						{
							"name": "select15"
						},
						{
							"name": "aggregate25"
						},
						{
							"name": "aggregate26"
						},
						{
							"name": "derivedColumn25"
						}
					],
					"scriptLines": [
						"source(output(",
						"          { Org commerciale} as string,",
						"          {Canal distribution} as string,",
						"          {Secteur d'activité} as string,",
						"          {Document de vente} as string,",
						"          Poste as string,",
						"          {Jour calendaire} as string,",
						"          {1ereDateLivrDdee} as string,",
						"          {Agence commerciale corrigé} as string,",
						"          {ATC Corrigé} as string,",
						"          {Donneur d'ordre} as string,",
						"          {Recept de march} as string,",
						"          {Destinataire facture} as string,",
						"          {Type doc vente} as string,",
						"          {Type de poste} as string,",
						"          Livraison as string,",
						"          {Type de livraison} as string,",
						"          {Type poste Livraison} as string,",
						"          Facture as string,",
						"          {Type de facture} as string,",
						"          {Type poste Facture} as string,",
						"          {Mois calendrier} as string,",
						"          {Année civile} as string,",
						"          {Motif commande} as string,",
						"          {Qté cdée} as string,",
						"          {CA cdé} as string,",
						"          {Qté livrée} as string,",
						"          {CA livré} as string,",
						"          {Qté facturée} as string,",
						"          {CA facturé} as string,",
						"          {Cout standard cdé} as string,",
						"          {Cout fabrication} as string,",
						"          {Cout standard livré} as string,",
						"          {Cout standard facturé} as string,",
						"          date_id as string,",
						"          year as string,",
						"          yearmonth as string,",
						"          qt_cd_e as string,",
						"          ca_cd_ as string,",
						"          qt_livr_e as string,",
						"          ca_livr_ as string,",
						"          qt_factur_e as string,",
						"          ca_factur_ as string,",
						"          year_month as string,",
						"          reference as string,",
						"          WholeSalerID as string,",
						"          WholeSalerHubID as string,",
						"          HubName as string,",
						"          HubSAPid as string,",
						"          toreplicate as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     inferDriftedColumnTypes: true,",
						"     ignoreNoFilesFound: false) ~> FacturationForOther",
						"source(output(",
						"          Commande as string,",
						"          {Référence Offre BA} as string,",
						"          {Qté Cdée} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> ArticulationSap",
						"source(output(",
						"          DateOffre as string,",
						"          {Date Prev Cde} as string,",
						"          {Code projet} as string,",
						"          Projet as string,",
						"          Type as string,",
						"          {CP projet} as string,",
						"          {Ville projet} as string,",
						"          NbLogement as string,",
						"          {Référence} as string,",
						"          Marque as string,",
						"          Famille as string,",
						"          Produit as string,",
						"          {Quantité} as string,",
						"          {Prix de base} as string,",
						"          {Prix DO} as string,",
						"          {Prix pro} as string,",
						"          {Prix total} as string,",
						"          {Numéro interne 1} as string,",
						"          Client as string,",
						"          {Ville client} as string,",
						"          {Type financement} as string,",
						"          {Numéro interne 2} as string,",
						"          {Négoce} as string,",
						"          {Ville négoce} as string,",
						"          {Statut offre} as string,",
						"          Responsable as string,",
						"          Groupe as string,",
						"          Offre as string,",
						"          {Date de maj statut} as string,",
						"          {Numéro avant vente} as string,",
						"          {Créateur offre} as string,",
						"          {Commentaire interne} as string,",
						"          {Offre dérogée} as string,",
						"          {Contrat cadre} as string,",
						"          {Offre nationale} as string,",
						"          {Année Tarif} as string,",
						"          PotentielP1N as string,",
						"          PotentielP2N as string,",
						"          PotentielP3N as string,",
						"          PotentielP4N as string,",
						"          PotentielP5N as string,",
						"          PotentielP6N as string,",
						"          {DateFinValidité} as string,",
						"          CODE_CMI as string,",
						"          NOM_CMI as string,",
						"          CodeATC as string,",
						"          DEEE as string,",
						"          OffreSupprimee as string,",
						"          {Date de création} as string,",
						"          NomSignataire1 as string,",
						"          NomSignataire2 as string,",
						"          DateSignataire1 as string,",
						"          DateSignataire2 as string,",
						"          {DateDérogation} as string,",
						"          Canal as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> stgOffre",
						"source(output(",
						"          Article as string,",
						"          Distributeur as string,",
						"          prix_unitaire as string,",
						"          {Durée_période} as string,",
						"          {Période} as string,",
						"          {Mois début} as string,",
						"          {Mois fin} as string,",
						"          mois1 as string,",
						"          annee1 as string,",
						"          mois2 as string,",
						"          annee2 as string,",
						"          dd as string,",
						"          month as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> PrixPeriode",
						"source(output(",
						"          yearmonth as string,",
						"          year as string,",
						"          month as string,",
						"          qte_ecoulement as string,",
						"          ca_ecoulement as string,",
						"          POSSAMidString as string,",
						"          HubSAPid as string,",
						"          reference as string,",
						"          distributeur as string,",
						"          agence_code as string,",
						"          marque as string,",
						"          {Code postal} as string,",
						"          marque_name as string,",
						"          toreplicate as string,",
						"          dd as string,",
						"          {Période} as string,",
						"          ref2 as string,",
						"          indexcols2 as string,",
						"          qte_ecc as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> ecoulmnt",
						"source(output(",
						"          Marque as string,",
						"          {Code Postal début} as string,",
						"          {Code Postal fin} as string,",
						"          Utilisateur as string,",
						"          Fonction as string,",
						"          {Département} as string,",
						"          ATC as string,",
						"          NomATC as string,",
						"          {Plan primes} as string,",
						"          Matricule as string,",
						"          {Canal final} as string,",
						"          toreplicate as string,",
						"          dd as string,",
						"          DR as string,",
						"          {Code postal} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> refAtc",
						"derivedColumn8, endArticulation join({Document de vente} == Commande,",
						"     joinType:'left',",
						"     broadcast: 'auto')~> join1",
						"derivedColumn19, endOffre join({Référence Offre BA} == Offre",
						"     && canal_final == Canal,",
						"     joinType:'left',",
						"     broadcast: 'auto')~> join2",
						"PrixPeriode derive({Période} = iif(length({Période})>1,{Période},\"0\"+{Période})) ~> derivedColumn1",
						"derivedColumn1 select(mapColumn(",
						"          Article,",
						"          Distributeur,",
						"          {Période},",
						"          annee2,",
						"          month",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> columnChoicePrix",
						"derivedColumn2, columnChoicePrix join(replace(lower(tempDist), \" \", \"\") == replace(lower(Distributeur), \" \", \"\")",
						"     && toInteger(year) == toInteger(annee2)",
						"     && toInteger({Mois calendrier}) == toInteger(month)",
						"     && coalesce(toString(toInteger(replace(reference, \" \", \"\"))),replace(reference, \" \", \"\")) == coalesce(toString(toInteger(replace(Article, \" \", \"\"))),replace(Article, \" \", \"\")),",
						"     joinType:'left',",
						"     broadcast: 'auto')~> join3",
						"select3 derive(toroll = mapLoop(abs(toInteger( {Qté facturée})), #index),",
						"          tempDist = iif(lower(WholeSalerID)=='ancs - accueil négoce chauffage sanitaire','partedis',\r",
						"  iif(instr(lower(WholeSalerID), 'trva - tereva' )>0, 'tereva', \r",
						"   iif(instr(lower(WholeSalerID), 'dsc')>0, 'dsc', \r",
						"    iif(instr(lower(WholeSalerID), 'vf' )>0, 'vf_confort', \r",
						"     iif(instr(lower(WholeSalerID), 'sonac' )>0, 'sonac',\r",
						"lower(WholeSalerID))))))) ~> derivedColumn2",
						"join3 derive({Période} = coalesce( {Période}, \"00\" )) ~> derivedColumn3",
						"filter3 foldDown(unroll(toroll, toroll),",
						"     mapColumn(",
						"          {Org commerciale} = { Org commerciale},",
						"          {Canal distribution},",
						"          {Secteur d'activité},",
						"          {Document de vente},",
						"          Poste,",
						"          {Jour calendaire},",
						"          {Agence commerciale corrigé},",
						"          {ATC Corrigé},",
						"          {Donneur d'ordre},",
						"          {Recept de march},",
						"          {Destinataire facture},",
						"          {Type doc vente},",
						"          {Type de poste},",
						"          Livraison,",
						"          {Type de livraison},",
						"          {Type poste Livraison},",
						"          Facture,",
						"          {Type de facture},",
						"          {Type poste Facture},",
						"          {Mois calendrier},",
						"          {Année civile},",
						"          {Motif commande},",
						"          {CA cdé},",
						"          {Qté livrée},",
						"          {CA livré},",
						"          {Qté facturée},",
						"          {CA facturé},",
						"          {Cout standard cdé},",
						"          {Cout fabrication},",
						"          {Cout standard livré},",
						"          {Cout standard facturé},",
						"          date_id,",
						"          year,",
						"          yearmonth,",
						"          qt_cd_e,",
						"          ca_cd_,",
						"          qt_livr_e,",
						"          qt_factur_e,",
						"          ca_factur_,",
						"          year_month,",
						"          reference,",
						"          WholeSalerID,",
						"          WholeSalerHubID,",
						"          HubName,",
						"          HubSAPid,",
						"          POSSAMidString,",
						"          toreplicate,",
						"          toroll,",
						"          {Période},",
						"          Offre,",
						"          {Facturation origin}",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> torolltoList",
						"torolltoList derive(ref2 = coalesce(toString(toInteger(replace(reference, \" \", \"\"))),replace(reference, \" \", \"\"))) ~> derivedColumn4",
						"derivedColumn4 window(over(year,",
						"          {Période},",
						"          POSSAMidString,",
						"          ref2),",
						"     asc(yearmonth, true),",
						"     asc(POSSAMidString, true),",
						"     asc(ref2, true),",
						"     indexcols2 = rowNumber()) ~> createIndexPartedis",
						"createIndexPartedis derive(indexcols2 = year+\"-\"+{Période}+\"-\"+POSSAMidString+\"-\"+coalesce(toString(toInteger(replace(reference, \" \", \"\"))),replace(reference, \" \", \"\"))+\"-\"+toString(indexcols2),",
						"          {Qté facturée} = iif(toDouble({Qté facturée})<=0, -1, 1)) ~> derivedColumn5",
						"stgOffre select(mapColumn(",
						"          Offre,",
						"          Canal,",
						"          {Numéro interne 2}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"ecoulmnt select(mapColumn(",
						"          yearmonth,",
						"          year,",
						"          month,",
						"          qte_ecoulement,",
						"          ca_ecoulement,",
						"          POSSAMidString,",
						"          HubSAPidEcoul = HubSAPid,",
						"          reference,",
						"          distributeur,",
						"          agence_code,",
						"          marque,",
						"          {Code postal},",
						"          marque_name,",
						"          toreplicate,",
						"          dd,",
						"          indexcols2,",
						"          qte_ecc",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select0",
						"join2 select(mapColumn(",
						"          { Org commerciale},",
						"          {Canal distribution},",
						"          {Secteur d'activité},",
						"          {Document de vente},",
						"          Poste,",
						"          {Jour calendaire},",
						"          {1ereDateLivrDdee},",
						"          {Agence commerciale corrigé},",
						"          {ATC Corrigé},",
						"          {Donneur d'ordre},",
						"          {Recept de march},",
						"          {Destinataire facture},",
						"          {Type doc vente},",
						"          {Type de poste},",
						"          Livraison,",
						"          {Type de livraison},",
						"          {Type poste Livraison},",
						"          Facture,",
						"          {Type de facture},",
						"          {Type poste Facture},",
						"          {Mois calendrier},",
						"          {Année civile},",
						"          {Motif commande},",
						"          {CA cdé},",
						"          {Qté livrée},",
						"          {CA livré},",
						"          {Qté facturée},",
						"          {CA facturé},",
						"          {Cout standard cdé},",
						"          {Cout fabrication},",
						"          {Cout standard livré},",
						"          {Cout standard facturé},",
						"          date_id,",
						"          year,",
						"          yearmonth,",
						"          qt_cd_e,",
						"          ca_cd_,",
						"          qt_livr_e,",
						"          ca_livr_,",
						"          qt_factur_e,",
						"          ca_factur_,",
						"          year_month,",
						"          reference,",
						"          WholeSalerID,",
						"          WholeSalerHubID,",
						"          HubName,",
						"          HubSAPid,",
						"          toreplicate,",
						"          Commande,",
						"          {Référence Offre BA},",
						"          Offre,",
						"          POSSAMidString = {Numéro interne 2},",
						"          {Facturation origin},",
						"          {Articulation Origin},",
						"          {Offre origin}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: false) ~> select3",
						"derivedColumn5 filter({Canal distribution}==\"43\") ~> Filtre43",
						"Filtre43, endEcoulement join(derivedColumn5@indexcols2 == select0@indexcols2,",
						"     joinType:'outer',",
						"     broadcast: 'auto')~> join5",
						"ArticulationSap derive({Articulation Origin} = \"Articulation Origin\") ~> endArticulation",
						"aggregate9 derive({Offre origin} = \"Offre origin\") ~> endOffre",
						"FacturationForOther derive({Facturation origin} = \"Facturation origin\") ~> derivedColumn8",
						"derivedColumn5 filter({Canal distribution}==\"51\" ||  {Canal distribution}==\"45\") ~> Filtre5145",
						"select0 derive({Ecoulement origin} = \"Ecoulement origin\") ~> endEcoulement",
						"select5 split(!isNull({Ecoulement origin}) && !isNull({Facturation origin}),",
						"     isNull({Facturation origin}),",
						"     disjoint: false) ~> split2@(avecMatching43, rigthEcoulement43, residu43)",
						"split2@rigthEcoulement43 select(mapColumn(",
						"          yearmonth = yearmonthEcoul,",
						"          year = yearEcoul,",
						"          month,",
						"          qte_ecoulement = ca_ecoulement,",
						"          POSSAMidStringEcoul,",
						"          HubSAPid,",
						"          reference = referenceEcoul,",
						"          distributeur,",
						"          agence_code,",
						"          marque,",
						"          {Code postal},",
						"          marque_name,",
						"          toreplicate = toreplicateEcoul,",
						"          dd,",
						"          indexcols2Ecoul,",
						"          qte_ecc,",
						"          {Ecoulement origin},",
						"          ca_ecoulement",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: true) ~> REcoulement43",
						"join5 select(mapColumn(",
						"          {Org commerciale},",
						"          {Canal distribution},",
						"          {Secteur d'activité},",
						"          {Document de vente},",
						"          Poste,",
						"          {Jour calendaire},",
						"          {Agence commerciale corrigé},",
						"          {ATC Corrigé},",
						"          {Donneur d'ordre},",
						"          {Recept de march},",
						"          {Destinataire facture},",
						"          {Type doc vente},",
						"          {Type de poste},",
						"          Livraison,",
						"          {Type de livraison},",
						"          {Type poste Livraison},",
						"          Facture,",
						"          {Type de facture},",
						"          {Type poste Facture},",
						"          {Mois calendrier},",
						"          {Année civile},",
						"          {Motif commande},",
						"          {CA cdé},",
						"          {Qté livrée},",
						"          {CA livré},",
						"          {Qté facturée},",
						"          {CA facturé},",
						"          {Cout standard cdé},",
						"          {Cout fabrication},",
						"          {Cout standard livré},",
						"          {Cout standard facturé},",
						"          date_id,",
						"          yearFact = torolltoList@year,",
						"          yearmonthFact = torolltoList@yearmonth,",
						"          qt_cd_e,",
						"          ca_cd_,",
						"          qt_livr_e,",
						"          qt_factur_e,",
						"          ca_factur_,",
						"          year_month,",
						"          referenceFact = torolltoList@reference,",
						"          WholeSalerID,",
						"          WholeSalerHubID,",
						"          HubName,",
						"          HubSAPid_Fact = HubSAPid,",
						"          POSSAMidStringFact = torolltoList@POSSAMidString,",
						"          toreplicateFact = torolltoList@toreplicate,",
						"          toroll,",
						"          {Période},",
						"          Offre,",
						"          {Facturation origin},",
						"          ref2,",
						"          indexcols2Fact = derivedColumn5@indexcols2,",
						"          yearmonthEcoul = select0@yearmonth,",
						"          yearEcoul = select0@year,",
						"          month,",
						"          qte_ecoulement,",
						"          ca_ecoulement,",
						"          POSSAMidStringEcoul = select0@POSSAMidString,",
						"          HubSAPid = HubSAPidEcoul,",
						"          referenceEcoul = select0@reference,",
						"          distributeur,",
						"          agence_code,",
						"          marque,",
						"          {Code postal},",
						"          marque_name,",
						"          toreplicateEcoul = select0@toreplicate,",
						"          dd,",
						"          indexcols2Ecoul = select0@indexcols2,",
						"          qte_ecc,",
						"          {Ecoulement origin}",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: true) ~> select5",
						"Filtre5145, REcoulement43 join(indexcols2 == indexcols2Ecoul,",
						"     joinType:'outer',",
						"     broadcast: 'auto')~> join7",
						"join7 select(mapColumn(",
						"          {Org commerciale},",
						"          {Canal distribution},",
						"          {Secteur d'activité},",
						"          {Document de vente},",
						"          Poste,",
						"          {Jour calendaire},",
						"          {Agence commerciale corrigé},",
						"          {ATC Corrigé},",
						"          {Donneur d'ordre},",
						"          {Recept de march},",
						"          {Destinataire facture},",
						"          {Type doc vente},",
						"          {Type de poste},",
						"          Livraison,",
						"          {Type de livraison},",
						"          {Type poste Livraison},",
						"          Facture,",
						"          {Type de facture},",
						"          {Type poste Facture},",
						"          {Mois calendrier},",
						"          {Année civile},",
						"          {Motif commande},",
						"          {CA cdé},",
						"          {Qté livrée},",
						"          {CA livré},",
						"          {Qté facturée},",
						"          {CA facturé},",
						"          {Cout standard cdé},",
						"          {Cout fabrication},",
						"          {Cout standard livré},",
						"          {Cout standard facturé},",
						"          date_id,",
						"          yearFact = torolltoList@year,",
						"          yearmonthFact = torolltoList@yearmonth,",
						"          qt_cd_e,",
						"          ca_cd_,",
						"          qt_livr_e,",
						"          qt_factur_e,",
						"          ca_factur_,",
						"          year_month,",
						"          referenceFact = torolltoList@reference,",
						"          WholeSalerID,",
						"          WholeSalerHubID,",
						"          HubName,",
						"          HubSAPidFact = torolltoList@HubSAPid,",
						"          POSSAMidString,",
						"          toreplicateFact = torolltoList@toreplicate,",
						"          toroll,",
						"          {Période},",
						"          Offre,",
						"          {Facturation origin},",
						"          ref2,",
						"          indexcols2,",
						"          yearmonthEcoul = REcoulement43@yearmonth,",
						"          yearEcoul = REcoulement43@year,",
						"          month,",
						"          qte_ecoulement,",
						"          POSSAMidStringEcoul,",
						"          HubSAPidEcoul = REcoulement43@HubSAPid,",
						"          referenceEcoul = REcoulement43@reference,",
						"          distributeur,",
						"          agence_code,",
						"          marque,",
						"          {Code postal},",
						"          marque_name,",
						"          toreplicateEcoul = REcoulement43@toreplicate,",
						"          dd,",
						"          indexcols2Ecoul,",
						"          qte_ecc,",
						"          {Ecoulement origin},",
						"          ca_ecoulement",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: true) ~> select6",
						"select6 split(!isNull({Ecoulement origin}) && !isNull({Facturation origin}),",
						"     isNull({Facturation origin}),",
						"     disjoint: false) ~> split3@(avecMatching5145, rigthEcoulement5154, residu5145)",
						"split3@rigthEcoulement5154 select(mapColumn(",
						"          yearmonth = yearmonthEcoul,",
						"          year = yearEcoul,",
						"          month,",
						"          qte_ecoulement,",
						"          POSSAMidString = POSSAMidStringEcoul,",
						"          HubSAPid = HubSAPidEcoul,",
						"          reference = referenceEcoul,",
						"          distributeur,",
						"          agence_code,",
						"          marque,",
						"          {Code postal},",
						"          marque_name,",
						"          toreplicate = toreplicateEcoul,",
						"          dd,",
						"          indexcols2 = indexcols2Ecoul,",
						"          qte_ecc,",
						"          {Ecoulement origin},",
						"          ca_ecoulement",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> REcoulement5145",
						"derivedColumn3 filter(({Canal distribution} !=\"42\" ) &&  (!isNull(POSSAMidString) && !isNull({Articulation Origin}) && !isNull({Offre origin}))) ~> filter3",
						"derivedColumn3 filter({Canal distribution} ==\"42\" || (isNull(POSSAMidString) || isNull({Articulation Origin}) || isNull({Offre origin}))) ~> filter4",
						"filter4 foldDown(unroll(toroll, toroll),",
						"     mapColumn(",
						"          { Org commerciale},",
						"          {Canal distribution},",
						"          {Secteur d'activité},",
						"          {Document de vente},",
						"          Poste,",
						"          {Jour calendaire},",
						"          {Agence commerciale corrigé},",
						"          {ATC Corrigé},",
						"          {Donneur d'ordre},",
						"          {Recept de march},",
						"          {Destinataire facture},",
						"          {Type doc vente},",
						"          {Type de poste},",
						"          Livraison,",
						"          {Type de livraison},",
						"          {Type poste Livraison},",
						"          Facture,",
						"          {Type de facture},",
						"          {Type poste Facture},",
						"          {Mois calendrier},",
						"          {Année civile},",
						"          {Motif commande},",
						"          {CA cdé},",
						"          {Qté livrée},",
						"          {CA livré},",
						"          {Qté facturée},",
						"          {CA facturé},",
						"          {Cout standard cdé},",
						"          {Cout fabrication},",
						"          {Cout standard livré},",
						"          {Cout standard facturé},",
						"          date_id,",
						"          year,",
						"          yearmonth,",
						"          qt_cd_e,",
						"          ca_cd_,",
						"          { Org comqtmerciale} = qt_livr_e,",
						"          qt_factur_e,",
						"          ca_factur_,",
						"          year_month,",
						"          reference,",
						"          WholeSalerID,",
						"          WholeSalerHubID,",
						"          HubName,",
						"          HubSAPid,",
						"          POSSAMidString,",
						"          toreplicate,",
						"          toroll,",
						"          {Période},",
						"          Offre,",
						"          {Facturation origin}",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> torolltoList2",
						"torolltoList2 derive(ref2 = coalesce(toString(toInteger(replace(reference, \" \", \"\"))),replace(reference, \" \", \"\"))) ~> derivedColumn9",
						"derivedColumn9 window(over(year,",
						"          {Période},",
						"          HubSAPid,",
						"          ref2),",
						"     asc(yearmonth, true),",
						"     asc(HubSAPid, true),",
						"     asc(reference, true),",
						"     indexcol2 = rowNumber()) ~> window1",
						"derivedColumn17 aggregate(groupBy(yearmonth,",
						"          year,",
						"          month,",
						"          periode,",
						"          qte_ecoulement,",
						"          POSSAMidString,",
						"          HubSAPid,",
						"          reference,",
						"          distributeur,",
						"          agence_code,",
						"          marque,",
						"          {Code postal},",
						"          marque_name,",
						"          toreplicate,",
						"          dd,",
						"          {Ecoulement origin}),",
						"     qte_ecc = sum(toFloat(qte_ecc)),",
						"          ca_ecoulement = min(toFloat(ca_ecoulement))) ~> ResteEcoulement",
						"ResteEcoulement derive(dd = mapLoop(abs(toInteger(qte_ecc)), #index),",
						"          ref2 = coalesce(toString(toInteger(replace(reference, \" \", \"\"))),replace(reference, \" \", \"\"))) ~> derivedColumn10",
						"derivedColumn10 foldDown(unroll(dd, dd),",
						"     mapColumn(",
						"          yearmonth,",
						"          year,",
						"          month,",
						"          periode,",
						"          qte_ecoulement,",
						"          POSSAMidString,",
						"          HubSAPid,",
						"          reference,",
						"          distributeur,",
						"          agence_code,",
						"          marque,",
						"          {Code postal},",
						"          marque_name,",
						"          toreplicate,",
						"          dd,",
						"          {Ecoulement origin},",
						"          qte_ecc,",
						"          ca_ecoulement,",
						"          ref2",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> ddToList",
						"ddToList window(over(year,",
						"          periode,",
						"          HubSAPid,",
						"          ref2),",
						"     asc(year, true),",
						"     asc(HubSAPid, true),",
						"     asc(ref2, true),",
						"     indexcol2 = rowNumber()) ~> window2",
						"window2 select(mapColumn(",
						"          yearmonth,",
						"          year,",
						"          month,",
						"          qte_ecoulement,",
						"          POSSAMidString,",
						"          HubSAPid,",
						"          reference,",
						"          distributeur,",
						"          agence_code,",
						"          marque,",
						"          {Code postal},",
						"          marque_name,",
						"          toreplicate,",
						"          {Ecoulement origin},",
						"          qte_ecc,",
						"          indexcol2,",
						"          ca_ecoulement,",
						"          periode,",
						"          ref2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select7",
						"select7 derive(indexcols2 = year+\"-\"+periode+\"-\"+HubSAPid+\"-\"+coalesce(toString(toInteger(replace(reference, \" \", \"\"))),replace(reference, \" \", \"\"))+\"-\"+toString(indexcol2),",
						"          qte_ecc = iif(toInteger(qte_ecc) >0, 1, -1 )) ~> derivedColumn11",
						"select11 derive(ca_ecoulement = abs(toDouble(ca_ecoulement))*qte_ecc) ~> caEcoulement",
						"select12, ecoulementReste join(select12@indexcols2 == ecoulementReste@indexcols2,",
						"     joinType:'outer',",
						"     broadcast: 'auto')~> join8",
						"window1 select(mapColumn(",
						"          { Org commerciale},",
						"          {Canal distribution},",
						"          {Secteur d'activité},",
						"          {Document de vente},",
						"          Poste,",
						"          {Jour calendaire},",
						"          {Agence commerciale corrigé},",
						"          {ATC Corrigé},",
						"          {Donneur d'ordre},",
						"          {Recept de march},",
						"          {Destinataire facture},",
						"          {Type doc vente},",
						"          {Type de poste},",
						"          Livraison,",
						"          {Type de livraison},",
						"          {Type poste Livraison},",
						"          Facture,",
						"          {Type de facture},",
						"          {Type poste Facture},",
						"          {Mois calendrier},",
						"          {Année civile},",
						"          {Motif commande},",
						"          {CA cdé},",
						"          {Qté livrée},",
						"          {CA livré},",
						"          {Qté facturée},",
						"          {CA facturé},",
						"          {Cout standard cdé},",
						"          {Cout fabrication},",
						"          {Cout standard livré},",
						"          {Cout standard facturé},",
						"          date_id,",
						"          year,",
						"          yearmonth,",
						"          qt_cd_e,",
						"          ca_cd_,",
						"          { Org comqtmerciale},",
						"          qt_factur_e,",
						"          ca_factur_,",
						"          year_month,",
						"          reference,",
						"          WholeSalerID,",
						"          WholeSalerHubID,",
						"          HubName,",
						"          HubSAPid,",
						"          POSSAMidString,",
						"          toreplicate,",
						"          toroll,",
						"          {Période},",
						"          Offre,",
						"          {Facturation origin},",
						"          ref2,",
						"          indexcol2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select8",
						"join8 select(mapColumn(",
						"          { Org commerciale},",
						"          {Canal distribution},",
						"          {Secteur d'activité},",
						"          {Document de vente},",
						"          Poste,",
						"          {Jour calendaire},",
						"          {Agence commerciale corrigé},",
						"          {ATC Corrigé},",
						"          {Donneur d'ordre},",
						"          {Recept de march},",
						"          {Destinataire facture},",
						"          {Type doc vente},",
						"          {Type de poste},",
						"          Livraison,",
						"          {Type de livraison},",
						"          {Type poste Livraison},",
						"          Facture,",
						"          {Type de facture},",
						"          {Type poste Facture},",
						"          {Mois calendrier},",
						"          {Année civile},",
						"          {Motif commande},",
						"          {CA cdé},",
						"          {Qté livrée},",
						"          {CA livré},",
						"          {Qté facturée},",
						"          {CA facturé},",
						"          {Cout standard cdé},",
						"          {Cout fabrication},",
						"          {Cout standard livré},",
						"          {Cout standard facturé},",
						"          date_id,",
						"          year,",
						"          yearmonth,",
						"          qt_cd_e,",
						"          ca_cd_,",
						"          F_reference = select12@reference,",
						"          qt_factur_e,",
						"          ca_factur_,",
						"          year_month,",
						"          WholeSalerID,",
						"          WholeSalerHubID,",
						"          HubName,",
						"          F_HubSAPid = select12@HubSAPid,",
						"          F_POSSAMidString = select12@POSSAMidString,",
						"          toreplicate = select12@toreplicate,",
						"          toroll,",
						"          {Période},",
						"          Offre,",
						"          {Facturation origin},",
						"          ref2 = ecoulementReste@ref2,",
						"          E_yearmonth,",
						"          E_year,",
						"          E_month,",
						"          qte_ecoulement,",
						"          POSSAMidString = ecoulementReste@POSSAMidString,",
						"          HubSAPid = ecoulementReste@HubSAPid,",
						"          E_reference = ecoulementReste@reference,",
						"          distributeur,",
						"          agence_code,",
						"          marque,",
						"          {Code postal},",
						"          marque_name,",
						"          {Ecoulement origin},",
						"          qte_ecc,",
						"          ca_ecoulement",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select9",
						"select9 split(!isNull({Ecoulement origin}) && !isNull({Facturation origin}),",
						"     isNull({Facturation origin}),",
						"     disjoint: false) ~> split4@(avecMatich, rightEcoulement, leftFacturation)",
						"split4@avecMatich derive(data_origin = \"facturation avec matching\") ~> adddataOriginAvecMatchin",
						"split4@rightEcoulement derive(data_origin = \"écoulement sans matching\") ~> adddataOriginEccSansMatching",
						"split4@leftFacturation derive(data_origin = \"facturation sans matching\",",
						"          {Qté facturée} = toInteger({Qté facturée})) ~> addDataOringFacturation",
						"split3@avecMatching5145 derive(data_origin = \"facturation avec matching\") ~> addDataOriginAvecMathcin4551",
						"split3@residu5145 derive(data_origin = \"facturation sans matching\") ~> addDataOriginFSM",
						"split2@avecMatching43 derive(data_origin = \"facturation avec matching\") ~> addDataOriginFM",
						"split2@residu43 derive(data_origin = \"facturation sans matching\") ~> derivedColumn14",
						"adddataOriginAvecMatchin select(mapColumn(",
						"          Org_commerciale = { Org commerciale},",
						"          {Canal distribution},",
						"          {Secteur d'activité},",
						"          {Document de vente},",
						"          Poste,",
						"          {Jour calendaire},",
						"          {Agence commerciale corrigé},",
						"          {ATC Corrigé},",
						"          {Donneur d'ordre},",
						"          {Recept de march},",
						"          {Destinataire facture},",
						"          {Type doc vente},",
						"          {Type de poste},",
						"          Livraison,",
						"          {Type de livraison},",
						"          {Type poste Livraison},",
						"          Facture,",
						"          {Type de facture},",
						"          {Type poste Facture},",
						"          {Mois calendrier},",
						"          {Année civile},",
						"          {Motif commande},",
						"          {CA cdé},",
						"          {Qté livrée},",
						"          {CA livré},",
						"          {Qté facturée},",
						"          {CA facturé},",
						"          {Cout standard cdé},",
						"          {Cout fabrication},",
						"          {Cout standard livré},",
						"          {Cout standard facturé},",
						"          date_id,",
						"          year,",
						"          yearmonth,",
						"          qt_cd_e,",
						"          ca_cd_,",
						"          qt_factur_e,",
						"          ca_factur_,",
						"          reference = F_reference,",
						"          WholeSalerID,",
						"          WholeSalerHubID,",
						"          HubName,",
						"          {Période},",
						"          Offre,",
						"          qte_ecoulement,",
						"          POSSAMidString,",
						"          HubSAPid,",
						"          reference = E_reference,",
						"          distributeur,",
						"          agence_code,",
						"          marque,",
						"          {Code postal},",
						"          marque_name,",
						"          qte_ecc,",
						"          ca_ecoulement,",
						"          data_origin",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> clearColumnsAvecMatchig42",
						"addDataOringFacturation select(mapColumn(",
						"          Org_commerciale = { Org commerciale},",
						"          {Canal distribution},",
						"          {Secteur d'activité},",
						"          {Document de vente},",
						"          Poste,",
						"          {Jour calendaire},",
						"          {Agence commerciale corrigé},",
						"          {ATC Corrigé},",
						"          {Donneur d'ordre},",
						"          {Recept de march},",
						"          {Destinataire facture},",
						"          {Type doc vente},",
						"          {Type de poste},",
						"          Livraison,",
						"          {Type de livraison},",
						"          {Type poste Livraison},",
						"          Facture,",
						"          {Type de facture},",
						"          {Type poste Facture},",
						"          {Mois calendrier},",
						"          {Année civile},",
						"          {Motif commande},",
						"          {CA cdé},",
						"          {Qté livrée},",
						"          {CA livré},",
						"          {Qté facturée},",
						"          {CA facturé},",
						"          {Cout standard cdé},",
						"          {Cout fabrication},",
						"          {Cout standard livré},",
						"          {Cout standard facturé},",
						"          date_id,",
						"          year,",
						"          yearmonth,",
						"          qt_cd_e,",
						"          ca_cd_,",
						"          qt_factur_e,",
						"          ca_factur_,",
						"          year_month,",
						"          reference = F_reference,",
						"          WholeSalerID,",
						"          WholeSalerHubID,",
						"          HubName,",
						"          HubSAPid = F_HubSAPid,",
						"          POSSAMidString = F_POSSAMidString,",
						"          {Période},",
						"          Offre,",
						"          data_origin",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> clearFacturationSansM",
						"adddataOriginEccSansMatching select(mapColumn(",
						"          yearmonth = E_yearmonth,",
						"          year = E_year,",
						"          month = E_month,",
						"          qte_ecoulement,",
						"          POSSAMidString,",
						"          HubSAPid,",
						"          reference = E_reference,",
						"          distributeur,",
						"          agence_code,",
						"          marque,",
						"          {Code postal},",
						"          marque_name,",
						"          {Ecoulement origin},",
						"          qte_ecc,",
						"          ca_ecoulement,",
						"          data_origin",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> clearEcoulementSansMatch",
						"derivedColumn14 select(mapColumn(",
						"          {Org commerciale},",
						"          {Canal distribution},",
						"          {Secteur d'activité},",
						"          {Document de vente},",
						"          Poste,",
						"          {Jour calendaire},",
						"          {Agence commerciale corrigé},",
						"          {ATC Corrigé},",
						"          {Donneur d'ordre},",
						"          {Recept de march},",
						"          {Destinataire facture},",
						"          {Type doc vente},",
						"          {Type de poste},",
						"          Livraison,",
						"          {Type de livraison},",
						"          {Type poste Livraison},",
						"          Facture,",
						"          {Type de facture},",
						"          {Type poste Facture},",
						"          {Mois calendrier},",
						"          {Année civile},",
						"          {Motif commande},",
						"          {CA cdé},",
						"          {Qté livrée},",
						"          {CA livré},",
						"          {Qté facturée},",
						"          {CA facturé},",
						"          {Cout standard cdé},",
						"          {Cout fabrication},",
						"          {Cout standard livré},",
						"          {Cout standard facturé},",
						"          date_id,",
						"          year = yearFact,",
						"          yearmonth = yearmonthFact,",
						"          qt_cd_e,",
						"          ca_cd_,",
						"          qt_livr_e,",
						"          qt_factur_e,",
						"          ca_factur_,",
						"          year_month,",
						"          reference = referenceFact,",
						"          WholeSalerID,",
						"          WholeSalerHubID,",
						"          HubName,",
						"          HubSAPid = HubSAPid_Fact,",
						"          POSSAMidString = POSSAMidStringFact,",
						"          {Période},",
						"          Offre,",
						"          data_origin",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> clearColFacturationSM43",
						"addDataOriginFM select(mapColumn(",
						"          Org_commerciale = {Org commerciale},",
						"          {Canal distribution},",
						"          {Secteur d'activité},",
						"          {Document de vente},",
						"          Poste,",
						"          {Jour calendaire},",
						"          {Agence commerciale corrigé},",
						"          {ATC Corrigé},",
						"          {Donneur d'ordre},",
						"          {Recept de march},",
						"          {Destinataire facture},",
						"          {Type doc vente},",
						"          {Type de poste},",
						"          Livraison,",
						"          {Type de livraison},",
						"          {Type poste Livraison},",
						"          Facture,",
						"          {Type de facture},",
						"          {Type poste Facture},",
						"          {Mois calendrier},",
						"          {Année civile},",
						"          {Motif commande},",
						"          {CA cdé},",
						"          {Qté livrée},",
						"          {CA livré},",
						"          {Qté facturée},",
						"          {CA facturé},",
						"          {Cout standard cdé},",
						"          {Cout fabrication},",
						"          {Cout standard livré},",
						"          {Cout standard facturé},",
						"          qt_cd_e,",
						"          ca_cd_,",
						"          qt_livr_e,",
						"          qt_factur_e,",
						"          ca_factur_,",
						"          WholeSalerID,",
						"          WholeSalerHubID,",
						"          HubName,",
						"          POSSAMidString = POSSAMidStringFact,",
						"          {Période},",
						"          Offre,",
						"          yearmonth = yearmonthFact,",
						"          year = yearFact,",
						"          month,",
						"          qte_ecoulement,",
						"          ca_ecoulement,",
						"          HubSAPid,",
						"          reference = referenceEcoul,",
						"          distributeur,",
						"          agence_code,",
						"          marque,",
						"          {Code postal},",
						"          marque_name,",
						"          qte_ecc,",
						"          data_origin",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> clearColAVM43",
						"addDataOriginAvecMathcin4551 select(mapColumn(",
						"          Org_commerciale = {Org commerciale},",
						"          {Canal distribution},",
						"          {Secteur d'activité},",
						"          {Document de vente},",
						"          Poste,",
						"          {Jour calendaire},",
						"          {Agence commerciale corrigé},",
						"          {ATC Corrigé},",
						"          {Donneur d'ordre},",
						"          {Recept de march},",
						"          {Destinataire facture},",
						"          {Type doc vente},",
						"          {Type de poste},",
						"          Livraison,",
						"          {Type de livraison},",
						"          {Type poste Livraison},",
						"          Facture,",
						"          {Type de facture},",
						"          {Type poste Facture},",
						"          {Mois calendrier},",
						"          {Année civile},",
						"          {Motif commande},",
						"          {CA cdé},",
						"          {Qté livrée},",
						"          {CA livré},",
						"          {Qté facturée},",
						"          {CA facturé},",
						"          {Cout standard cdé},",
						"          {Cout fabrication},",
						"          {Cout standard livré},",
						"          {Cout standard facturé},",
						"          date_id,",
						"          qt_cd_e,",
						"          ca_cd_,",
						"          qt_livr_e,",
						"          qt_factur_e,",
						"          ca_factur_,",
						"          WholeSalerID,",
						"          WholeSalerHubID,",
						"          HubName,",
						"          {Période},",
						"          Offre,",
						"          yearmonth = yearmonthFact,",
						"          year = yearFact,",
						"          month,",
						"          qte_ecoulement,",
						"          POSSAMidString = POSSAMidStringEcoul,",
						"          HubSAPid = HubSAPidEcoul,",
						"          reference = referenceEcoul,",
						"          distributeur,",
						"          agence_code,",
						"          marque,",
						"          {Code postal},",
						"          marque_name,",
						"          qte_ecc,",
						"          ca_ecoulement,",
						"          data_origin",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> clearColumnAVM5145",
						"addDataOriginFSM select(mapColumn(",
						"          {Org commerciale},",
						"          {Canal distribution},",
						"          {Secteur d'activité},",
						"          {Document de vente},",
						"          Poste,",
						"          {Jour calendaire},",
						"          {Agence commerciale corrigé},",
						"          {ATC Corrigé},",
						"          {Donneur d'ordre},",
						"          {Recept de march},",
						"          {Destinataire facture},",
						"          {Type doc vente},",
						"          {Type de poste},",
						"          Livraison,",
						"          {Type de livraison},",
						"          {Type poste Livraison},",
						"          Facture,",
						"          {Type de facture},",
						"          {Type poste Facture},",
						"          {Mois calendrier},",
						"          {Année civile},",
						"          {Motif commande},",
						"          {CA cdé},",
						"          {Qté livrée},",
						"          {CA livré},",
						"          {Qté facturée},",
						"          {CA facturé},",
						"          {Cout standard cdé},",
						"          {Cout fabrication},",
						"          {Cout standard livré},",
						"          {Cout standard facturé},",
						"          date_id,",
						"          year = yearFact,",
						"          month,",
						"          yearmonth = yearmonthFact,",
						"          qt_cd_e,",
						"          ca_cd_,",
						"          qt_livr_e,",
						"          qt_factur_e,",
						"          ca_factur_,",
						"          year_month,",
						"          reference = referenceFact,",
						"          WholeSalerID,",
						"          WholeSalerHubID,",
						"          HubName,",
						"          HubSAPid = HubSAPidFact,",
						"          POSSAMidString,",
						"          {Période},",
						"          Offre,",
						"          data_origin",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> clearColFSM4551",
						"clearColFSM4551, clearColFacturationSM43 union(byName: true)~> union1",
						"union1 select(mapColumn(",
						"          Org_commerciale = {Org commerciale},",
						"          {Canal distribution},",
						"          {Secteur d'activité},",
						"          {Document de vente},",
						"          Poste,",
						"          {Jour calendaire},",
						"          {Agence commerciale corrigé},",
						"          {ATC Corrigé},",
						"          {Donneur d'ordre},",
						"          {Recept de march},",
						"          {Destinataire facture},",
						"          {Type doc vente},",
						"          {Type de poste},",
						"          Livraison,",
						"          {Type de livraison},",
						"          {Type poste Livraison},",
						"          Facture,",
						"          {Type de facture},",
						"          {Type poste Facture},",
						"          {Mois calendrier},",
						"          {Année civile},",
						"          {Motif commande},",
						"          {CA cdé},",
						"          {Qté livrée},",
						"          {CA livré},",
						"          {Qté facturée},",
						"          {CA facturé},",
						"          {Cout standard cdé},",
						"          {Cout fabrication},",
						"          {Cout standard livré},",
						"          {Cout standard facturé},",
						"          date_id,",
						"          year,",
						"          yearmonth,",
						"          qt_cd_e,",
						"          ca_cd_,",
						"          qt_factur_e,",
						"          ca_factur_,",
						"          year_month,",
						"          reference,",
						"          WholeSalerID,",
						"          WholeSalerHubID,",
						"          HubName,",
						"          HubSAPid,",
						"          POSSAMidString,",
						"          {Période},",
						"          Offre,",
						"          data_origin",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> unionFSM435145",
						"clearFacturationSansM, unionFSM435145 union(byName: true)~> union2",
						"union2 select(mapColumn(",
						"          Org_commerciale,",
						"          {Canal distribution},",
						"          {Secteur d'activité},",
						"          {Document de vente},",
						"          Poste,",
						"          {Jour calendaire},",
						"          {Agence commerciale corrigé},",
						"          {ATC Corrigé},",
						"          {Donneur d'ordre},",
						"          {Recept de march},",
						"          {Destinataire facture},",
						"          {Type doc vente},",
						"          {Type de poste},",
						"          Livraison,",
						"          {Type de livraison},",
						"          {Type poste Livraison},",
						"          Facture,",
						"          {Type de facture},",
						"          {Type poste Facture},",
						"          {Mois calendrier},",
						"          {Année civile},",
						"          {Motif commande},",
						"          {CA cdé},",
						"          {Qté livrée},",
						"          {CA livré},",
						"          {Qté facturée},",
						"          {CA facturé},",
						"          {Cout standard cdé},",
						"          {Cout fabrication},",
						"          {Cout standard livré},",
						"          {Cout standard facturé},",
						"          date_id,",
						"          year,",
						"          yearmonth,",
						"          qt_cd_e,",
						"          ca_cd_,",
						"          qt_factur_e,",
						"          ca_factur_,",
						"          year_month,",
						"          reference,",
						"          WholeSalerID,",
						"          WholeSalerHubID,",
						"          HubName,",
						"          HubSAPid,",
						"          POSSAMidString,",
						"          {Période},",
						"          Offre,",
						"          data_origin",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> endFactSansMatching",
						"clearColumnAVM5145, clearColAVM43 union(byName: true)~> union3",
						"derivedColumn15 select(mapColumn(",
						"          Org_commerciale,",
						"          {Canal distribution},",
						"          {Secteur d'activité},",
						"          {Document de vente},",
						"          Poste,",
						"          {Jour calendaire},",
						"          {Agence commerciale corrigé},",
						"          {ATC Corrigé},",
						"          {Donneur d'ordre},",
						"          {Recept de march},",
						"          {Destinataire facture},",
						"          {Type doc vente},",
						"          {Type de poste},",
						"          Livraison,",
						"          {Type de livraison},",
						"          {Type poste Livraison},",
						"          Facture,",
						"          {Type de facture},",
						"          {Type poste Facture},",
						"          {Mois calendrier},",
						"          {Année civile},",
						"          {Motif commande},",
						"          {CA cdé},",
						"          {Qté livrée},",
						"          {CA livré},",
						"          {Qté facturée},",
						"          {CA facturé},",
						"          {Cout standard cdé},",
						"          {Cout fabrication},",
						"          {Cout standard livré},",
						"          {Cout standard facturé},",
						"          date_id,",
						"          qt_cd_e,",
						"          ca_cd_,",
						"          qt_livr_e,",
						"          qt_factur_e,",
						"          ca_factur_,",
						"          WholeSalerID,",
						"          WholeSalerHubID,",
						"          HubName,",
						"          {Période},",
						"          Offre,",
						"          yearmonth,",
						"          year,",
						"          month,",
						"          qte_ecoulement,",
						"          POSSAMidString,",
						"          HubSAPid,",
						"          reference,",
						"          distributeur,",
						"          agence_code,",
						"          marque,",
						"          {Code postal},",
						"          marque_name,",
						"          qte_ecc,",
						"          ca_ecoulement,",
						"          data_origin",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> endAVM434551",
						"clearColumnsAvecMatchig42, endAVM434551 union(byName: true)~> union4",
						"union4 select(mapColumn(",
						"          Org_commerciale,",
						"          {Canal distribution},",
						"          {Secteur d'activité},",
						"          {Document de vente},",
						"          Poste,",
						"          {Jour calendaire},",
						"          {Agence commerciale corrigé},",
						"          {ATC Corrigé},",
						"          {Donneur d'ordre},",
						"          {Recept de march},",
						"          {Destinataire facture},",
						"          {Type doc vente},",
						"          {Type de poste},",
						"          Livraison,",
						"          {Type de livraison},",
						"          {Type poste Livraison},",
						"          Facture,",
						"          {Type de facture},",
						"          {Type poste Facture},",
						"          {Mois calendrier},",
						"          {Année civile},",
						"          {Motif commande},",
						"          {CA cdé},",
						"          {Qté livrée},",
						"          {CA livré},",
						"          {Qté facturée},",
						"          {CA facturé},",
						"          {Cout standard cdé},",
						"          {Cout fabrication},",
						"          {Cout standard livré},",
						"          {Cout standard facturé},",
						"          date_id,",
						"          year,",
						"          yearmonth,",
						"          qt_cd_e,",
						"          ca_cd_,",
						"          qt_factur_e,",
						"          ca_factur_,",
						"          reference,",
						"          WholeSalerID,",
						"          WholeSalerHubID,",
						"          HubName,",
						"          {Période},",
						"          Offre,",
						"          month,",
						"          qte_ecoulement,",
						"          POSSAMidString,",
						"          HubSAPid,",
						"          distributeur,",
						"          agence_code,",
						"          marque,",
						"          {Code postal},",
						"          marque_name,",
						"          qte_ecc,",
						"          ca_ecoulement,",
						"          data_origin,",
						"          Org_commerciale",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> endFactAVM",
						"union3 derive(ca_ecoulement = toDouble(ca_ecoulement),",
						"          qte_ecc = toInteger(qte_ecc),",
						"          {Qté facturée} = toInteger({Qté facturée})) ~> derivedColumn15",
						"clearEcoulementSansMatch select(mapColumn(",
						"          yearmonth,",
						"          year,",
						"          month,",
						"          qte_ecoulement,",
						"          POSSAMidString,",
						"          HubSAPid,",
						"          reference,",
						"          distributeur,",
						"          agence_code,",
						"          marque,",
						"          {Code postal},",
						"          marque_name,",
						"          {Ecoulement origin},",
						"          qte_ecc,",
						"          ca_ecoulement,",
						"          data_origin",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> endEcoulementSansMatcing",
						"derivedColumn16, endFactSansMatching union(byName: true)~> union5",
						"union5 select(mapColumn(",
						"          Org_commerciale,",
						"          {Canal distribution},",
						"          {Secteur d'activité},",
						"          {Document de vente},",
						"          Poste,",
						"          {Jour calendaire},",
						"          {Agence commerciale corrigé},",
						"          {ATC Corrigé},",
						"          {Donneur d'ordre},",
						"          {Recept de march},",
						"          {Destinataire facture},",
						"          {Type doc vente},",
						"          {Type de poste},",
						"          Livraison,",
						"          {Type de livraison},",
						"          {Type poste Livraison},",
						"          Facture,",
						"          {Type de facture},",
						"          {Type poste Facture},",
						"          {Mois calendrier},",
						"          {Année civile},",
						"          {Motif commande},",
						"          {CA cdé},",
						"          {Qté livrée},",
						"          {CA livré},",
						"          {Qté facturée},",
						"          {CA facturé},",
						"          {Cout standard cdé},",
						"          {Cout fabrication},",
						"          {Cout standard livré},",
						"          {Cout standard facturé},",
						"          date_id,",
						"          year,",
						"          yearmonth,",
						"          qt_cd_e,",
						"          ca_cd_,",
						"          qt_factur_e,",
						"          ca_factur_,",
						"          reference,",
						"          WholeSalerID,",
						"          WholeSalerHubID,",
						"          HubName,",
						"          {Période},",
						"          Offre,",
						"          month,",
						"          qte_ecoulement,",
						"          POSSAMidString,",
						"          HubSAPid,",
						"          distributeur,",
						"          agence_code,",
						"          marque,",
						"          {Code postal},",
						"          marque_name,",
						"          qte_ecc,",
						"          ca_ecoulement,",
						"          data_origin,",
						"          year_month",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select10",
						"endFactAVM derive({Qté facturée} = toInteger({Qté facturée})) ~> derivedColumn16",
						"select10, endEcoulementSansMatcing union(byName: true)~> union6",
						"aggregate1 select(mapColumn(",
						"          Offre,",
						"          {ATC performance} = CodeATC,",
						"          Canal",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> endOffreATC",
						"derivedColumn20, endOffreATC join(unionDecrementation@Offre == endOffreATC@Offre",
						"     && canal_final == Canal,",
						"     joinType:'left',",
						"     broadcast: 'auto')~> join9",
						"REcoulement5145 derive(periode = split(indexcols2,'-')[2]) ~> derivedColumn17",
						"select8 derive(indexcols2 = year+\"-\"+{Période}+\"-\"+HubSAPid+\"-\"+ref2+\"-\"+toString(indexcol2),",
						"          {Qté facturée} = iif(toDouble({Qté facturée})<=0, -1, 1)) ~> derivedColumn18",
						"derivedColumn11 select(mapColumn(",
						"          E_yearmonth = yearmonth,",
						"          E_year = year,",
						"          E_month = month,",
						"          qte_ecoulement,",
						"          POSSAMidString,",
						"          HubSAPid,",
						"          reference,",
						"          distributeur,",
						"          agence_code,",
						"          marque,",
						"          {Code postal},",
						"          marque_name,",
						"          toreplicate,",
						"          {Ecoulement origin},",
						"          qte_ecc,",
						"          ca_ecoulement,",
						"          periode,",
						"          ref2,",
						"          indexcols2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select11",
						"derivedColumn18 select(mapColumn(",
						"          { Org commerciale},",
						"          {Canal distribution},",
						"          {Secteur d'activité},",
						"          {Document de vente},",
						"          Poste,",
						"          {Jour calendaire},",
						"          {Agence commerciale corrigé},",
						"          {ATC Corrigé},",
						"          {Donneur d'ordre},",
						"          {Recept de march},",
						"          {Destinataire facture},",
						"          {Type doc vente},",
						"          {Type de poste},",
						"          Livraison,",
						"          {Type de livraison},",
						"          {Type poste Livraison},",
						"          Facture,",
						"          {Type de facture},",
						"          {Type poste Facture},",
						"          {Mois calendrier},",
						"          {Année civile},",
						"          {Motif commande},",
						"          {CA cdé},",
						"          {Qté livrée},",
						"          {CA livré},",
						"          {Qté facturée},",
						"          {CA facturé},",
						"          {Cout standard cdé},",
						"          {Cout fabrication},",
						"          {Cout standard livré},",
						"          {Cout standard facturé},",
						"          date_id,",
						"          year,",
						"          yearmonth,",
						"          qt_cd_e,",
						"          ca_cd_,",
						"          { Org comqtmerciale},",
						"          qt_factur_e,",
						"          ca_factur_,",
						"          year_month,",
						"          reference,",
						"          WholeSalerID,",
						"          WholeSalerHubID,",
						"          HubName,",
						"          HubSAPid,",
						"          POSSAMidString,",
						"          toreplicate,",
						"          toroll,",
						"          {Période},",
						"          Offre,",
						"          {Facturation origin},",
						"          ref2,",
						"          indexcols2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select12",
						"caEcoulement select(mapColumn(",
						"          E_yearmonth,",
						"          E_year,",
						"          E_month,",
						"          qte_ecoulement,",
						"          POSSAMidString,",
						"          HubSAPid,",
						"          reference,",
						"          distributeur,",
						"          agence_code,",
						"          marque,",
						"          {Code postal},",
						"          marque_name,",
						"          toreplicate,",
						"          {Ecoulement origin},",
						"          qte_ecc,",
						"          ca_ecoulement,",
						"          periode,",
						"          ref2,",
						"          indexcols2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> ecoulementReste",
						"stgOffre aggregate(groupBy(Offre,",
						"          Canal),",
						"     CodeATC = last(CodeATC)) ~> aggregate1",
						"join1 derive(canal_final = iif( {Canal distribution}==\"43\" ,  \"Chantier\" , \"Diffus\" )) ~> derivedColumn19",
						"unionDecrementation derive(canal_final = iif( {Canal distribution}==\"43\" ,  \"Chantier\" , \"Diffus\" ),",
						"          month = coalesce(month, right(yearmonth,2) )) ~> derivedColumn20",
						"join9 select(mapColumn(",
						"          Org_commerciale,",
						"          {Canal distribution},",
						"          {Secteur d'activité},",
						"          {Document de vente},",
						"          Poste,",
						"          {Jour calendaire},",
						"          {Agence commerciale corrigé},",
						"          {ATC Corrigé},",
						"          {Donneur d'ordre},",
						"          {Recept de march},",
						"          {Destinataire facture},",
						"          {Type doc vente},",
						"          {Type de poste},",
						"          Livraison,",
						"          {Type de livraison},",
						"          {Type poste Livraison},",
						"          Facture,",
						"          {Type de facture},",
						"          {Type poste Facture},",
						"          {Mois calendrier},",
						"          {Année civile},",
						"          {Motif commande},",
						"          {CA cdé},",
						"          {Qté livrée},",
						"          {CA livré},",
						"          {Qté facturée},",
						"          {CA facturé},",
						"          {Cout standard cdé},",
						"          {Cout fabrication},",
						"          {Cout standard livré},",
						"          {Cout standard facturé},",
						"          date_id,",
						"          year,",
						"          yearmonth,",
						"          qt_cd_e,",
						"          ca_cd_,",
						"          qt_factur_e,",
						"          ca_factur_,",
						"          reference,",
						"          WholeSalerID,",
						"          WholeSalerHubID,",
						"          HubName,",
						"          {Période},",
						"          Offre = unionDecrementation@Offre,",
						"          month,",
						"          qte_ecoulement,",
						"          POSSAMidString,",
						"          HubSAPid,",
						"          distributeur,",
						"          agence_code,",
						"          marque,",
						"          {Code postal},",
						"          marque_name,",
						"          qte_ecc,",
						"          ca_ecoulement,",
						"          data_origin,",
						"          {Ecoulement origin},",
						"          canal_final,",
						"          Offre = endOffreATC@Offre,",
						"          {ATC performance},",
						"          Canal",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select13",
						"filter4 aggregate({Qté facturée} = sum( toInteger({Qté facturée}) )) ~> aggregate2",
						"derivedColumn18 aggregate({Qté facturée} = sum(toInteger({Qté facturée})),",
						"          column1 = sum(1)) ~> aggregate3",
						"adddataOriginAvecMatchin aggregate(col1 = sum(1)) ~> aggregate4",
						"derivedColumn2 aggregate(totalQteFactuter = sum(toInteger({Qté facturée}))) ~> aggregate5",
						"filter3 aggregate(qte4251 = sum(toInteger({Qté facturée}))) ~> aggregate6",
						"select13 derive(distributeur = coalesce(lower(distributeur),iif(lower(WholeSalerID)=='ancs - accueil négoce chauffage sanitaire','partedis', iif(instr(lower(WholeSalerID), 'trva - tereva' )>0, 'tereva', iif(instr(lower(WholeSalerID), 'dsc')>0, 'dsc', iif(instr(lower(WholeSalerID), 'vf' )>0, 'vf_confort', iif(instr(lower(WholeSalerID), 'sonac' )>0, 'sonac',lower(WholeSalerID))))))),",
						"          marque_id = iif(data_origin == \"écoulement sans matching\",marque,Org_commerciale)) ~> derivedColumn21",
						"derivedColumn21 derive(marque_name = iif(marque_id=='1604', \"SaunierDuval\", iif(marque_id=='1621', \"Vaillant\", \"\")),",
						"          {Canal distribution} = iif(data_origin == \"écoulement sans matching\",\"42\",{Canal distribution}),",
						"          ca_final = iif( in([\"écoulement sans matching\",'decrementation ecoulement sans matching'], data_origin),toString(ca_ecoulement),toString({CA facturé})),",
						"          qt_final = iif( in([\"écoulement sans matching\",'decrementation ecoulement sans matching'], data_origin) ,toString(qte_ecc),toString({Qté facturée}))) ~> derivedColumn22",
						"derivedColumn22 derive(canal_final = iif({Canal distribution} ==\"43\",\"Chantier\",\"Diffus\")) ~> derivedColumn23",
						"refAtc aggregate(groupBy(Marque,",
						"          {Canal final},",
						"          {Code postal}),",
						"     ATC = max(ATC),",
						"          NomATC = max(NomATC),",
						"          Matricule = max(Matricule)) ~> aggregate8",
						"aggregate8 derive({Code postal} = toInteger({Code postal})) ~> derivedColumn24",
						"derivedColumn24 select(mapColumn(",
						"          Marque,",
						"          {Canal final},",
						"          {Code postal},",
						"          ATC,",
						"          NomATC,",
						"          Matricule",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> endATC",
						"derivedColumn23, endATC join(marque_name == endATC@Marque",
						"     && canal_final == {Canal final}",
						"     && iif(data_origin==\"decrementation ecoulement sans matching\", -5, toInteger(select13@{Code postal})) == endATC@{Code postal},",
						"     joinType:'left',",
						"     broadcast: 'auto')~> join10",
						"join10 select(mapColumn(",
						"          yearmonth,",
						"          year,",
						"          month,",
						"          qte_ecoulement,",
						"          ca_ecoulement,",
						"          POSSAMidString,",
						"          HubSAPid,",
						"          reference,",
						"          distributeur,",
						"          agence_code,",
						"          marque_id,",
						"          {Code postal} = select13@{Code postal},",
						"          marque_name,",
						"          {Canal distribution},",
						"          {Secteur d'activité},",
						"          {Document de vente},",
						"          {Jour calendaire},",
						"          {Agence commerciale corrigé},",
						"          {ATC Corrigé},",
						"          {Donneur d'ordre},",
						"          {Recept de march},",
						"          {Type doc vente},",
						"          {Type de poste},",
						"          Livraison,",
						"          {Type de livraison},",
						"          {Type poste Livraison},",
						"          Facture,",
						"          {Type poste Facture},",
						"          {Motif commande},",
						"          {Qté facturée},",
						"          {CA facturé},",
						"          no_offre = Offre,",
						"          ca_final,",
						"          qt_final,",
						"          data_origin,",
						"          canal_final,",
						"          {ATC performance},",
						"          ATC,",
						"          NomATC,",
						"          Matricule",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select14",
						"endEcoulementSansMatcing derive(POSSAMidString = HubSAPid,",
						"          qte_ecc = -1*toDouble(qte_ecc),",
						"          ca_ecoulement = -1*toDouble(ca_ecoulement),",
						"          data_origin = \"decrementation ecoulement sans matching\") ~> endDecrementation",
						"union6, endDecrementation union(byName: true)~> unionDecrementation",
						"derivedColumn3 filter(POSSAMidString==\"16001050\" && reference ==\"0010021498\" && year=='2021') ~> filter6",
						"derivedColumn2 filter(POSSAMidString==\"16001050\" && reference==\"0010021498\" && year=='2021') ~> ftest",
						"createIndexPartedis filter(POSSAMidString==\"16001050\" && ref2==\"10021498\" && year=='2021') ~> filter7",
						"select1 aggregate(groupBy(Offre,",
						"          Canal),",
						"     {Numéro interne 2} = max({Numéro interne 2})) ~> aggregate9",
						"ecoulementReste aggregate(qte_ecc = sum(toFloat(qte_ecc))) ~> aggregate10",
						"REcoulement5145 aggregate(qte_ecc = sum(toFloat(qte_ecc))) ~> aggregate11",
						"ResteEcoulement aggregate(qte_ecc = sum(toFloat(qte_ecc))) ~> aggregate12",
						"derivedColumn11 aggregate(qte_ecc = sum(toFloat(qte_ecc))) ~> aggregate13",
						"select3 aggregate(Qt = sum(toFloat({Qté facturée}))) ~> aggregate14",
						"FacturationForOther aggregate(groupBy(WholeSalerID),",
						"     {Qté facturée} = sum(toFloat({Qté facturée}))) ~> aggregate15",
						"derivedColumn5 aggregate({Qté facturée} = sum(toInteger({Qté facturée}))) ~> aggregate16",
						"Filtre5145 aggregate({Qté facturée} = sum(toInteger({Qté facturée}))) ~> aggregate17",
						"Filtre43 aggregate({Qté facturée} = sum(toInteger({Qté facturée}))) ~> aggregate18",
						"select5 aggregate({Qté facturée} = sum(toInteger({Qté facturée}))) ~> aggregate19",
						"addDataOriginFM aggregate({Qté facturée} = sum(toInteger({Qté facturée}))) ~> aggregate20",
						"clearColFacturationSM43 aggregate({Qté facturée} = sum(toInteger({Qté facturée}))) ~> aggregate21",
						"join7 aggregate({Qté facturée} = sum(toInteger({Qté facturée}))) ~> aggregate22",
						"addDataOriginAvecMathcin4551 aggregate({Qté facturée} = sum(toInteger({Qté facturée}))) ~> aggregate23",
						"addDataOriginFSM aggregate({Qté facturée} = sum(toInteger({Qté facturée}))) ~> aggregate24",
						"aggregate13 select(mapColumn(",
						"          qte_ecc",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select15",
						"derivedColumn15 aggregate({Qté facturée} = sum(toInteger({Qté facturée}))) ~> aggregate25",
						"unionFSM435145 aggregate({Qté facturée} = sum(toInteger({Qté facturée}))) ~> aggregate26",
						"select14 derive({ATC performance} = {ATC performance}) ~> derivedColumn25",
						"select13 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['tempVenteDeroge.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> endSinkOutput",
						"clearColFacturationSM43 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          {affecte/non_affecte;plateforme/vente directe;origine de la ligne;year;month;Code client livr�;code client plateforme livree;code produit;quantite;ca;Code postal du client livr�;marque;ID marque;ID canal de distribution;Nom du canal;Diffus/Chantier;document_vente (vente directe);Agence commerciale corrig� (vente directe);Donneur d'ordre (vente directe);Facture (vente directe);Type poste Facture (vente directe);Num�ro offre;ATC Corrig� (vente directe);ATC offre;ATC livr�;DR (ATC Performance);ATC Performance;NomATC;Motif commande (vente directe);Type de facture (vente directe);Description;N1groupe;N2groupe;N3groupe;N4groupe;N5groupe;N6groupe;N7groupe;N1groupedesignation;N2groupedesignation;N3groupedesignation;N4groupedesignation;N5groupedesignation;N6groupedesignation;N7groupedesignation;N1localedesignation;N2localedesignation;N3localedesignation;N4localedesignation;N5localedesignation;N6localedesignation;N7localedesignation;N1locale;N2locale;N3locale;N4locale;N5locale;N6locale;N7locale;Hi�rarchgroupe;Hi�rarchlocale;Client_direct_Nom du compte;Client direct_Groupe cible/Typologie g�n�rale;Client direct_Sous groupe cible/Typologie d�taill�e;Client direct_Compte principal: Num�ro du compte;Client direct_Compte principal: Nom du compte;Client;Num�ro client indirect;CODE_CMI;NOM_CMI;Nom du compte;Client Indirect_ Groupe cible/Typologie g�n�rale;Client Indirect_ Sous groupe cible/Typologie d�taill�e;Client Indirect_  Compte principal: Num�ro du compte;Client Indirect_  Compte principal: Nom du compte;Client Direct - Hi�rarchie N1 SAP ;Client Direct - Hi�rarchie N2 SAP ;Client Indirect - Hi�rarchie N1 SAP;Client Indirect - Hi�rarchie N2 SAP} as string",
						"     ),",
						"     partitionFileNames:['ventederogeAnalysis.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1",
						"clearColAVM43 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          {affecte/non_affecte;plateforme/vente directe;origine de la ligne;year;month;Code client livr�;code client plateforme livree;code produit;quantite;ca;Code postal du client livr�;marque;ID marque;ID canal de distribution;Nom du canal;Diffus/Chantier;document_vente (vente directe);Agence commerciale corrig� (vente directe);Donneur d'ordre (vente directe);Facture (vente directe);Type poste Facture (vente directe);Num�ro offre;ATC Corrig� (vente directe);ATC offre;ATC livr�;DR (ATC Performance);ATC Performance;NomATC;Motif commande (vente directe);Type de facture (vente directe);Description;N1groupe;N2groupe;N3groupe;N4groupe;N5groupe;N6groupe;N7groupe;N1groupedesignation;N2groupedesignation;N3groupedesignation;N4groupedesignation;N5groupedesignation;N6groupedesignation;N7groupedesignation;N1localedesignation;N2localedesignation;N3localedesignation;N4localedesignation;N5localedesignation;N6localedesignation;N7localedesignation;N1locale;N2locale;N3locale;N4locale;N5locale;N6locale;N7locale;Hi�rarchgroupe;Hi�rarchlocale;Client_direct_Nom du compte;Client direct_Groupe cible/Typologie g�n�rale;Client direct_Sous groupe cible/Typologie d�taill�e;Client direct_Compte principal: Num�ro du compte;Client direct_Compte principal: Nom du compte;Client;Num�ro client indirect;CODE_CMI;NOM_CMI;Nom du compte;Client Indirect_ Groupe cible/Typologie g�n�rale;Client Indirect_ Sous groupe cible/Typologie d�taill�e;Client Indirect_  Compte principal: Num�ro du compte;Client Indirect_  Compte principal: Nom du compte;Client Direct - Hi�rarchie N1 SAP ;Client Direct - Hi�rarchie N2 SAP ;Client Indirect - Hi�rarchie N1 SAP;Client Indirect - Hi�rarchie N2 SAP} as string",
						"     ),",
						"     partitionFileNames:['factorationAVM43.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink2",
						"unionFSM435145 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          {affecte/non_affecte;plateforme/vente directe;origine de la ligne;year;month;Code client livr�;code client plateforme livree;code produit;quantite;ca;Code postal du client livr�;marque;ID marque;ID canal de distribution;Nom du canal;Diffus/Chantier;document_vente (vente directe);Agence commerciale corrig� (vente directe);Donneur d'ordre (vente directe);Facture (vente directe);Type poste Facture (vente directe);Num�ro offre;ATC Corrig� (vente directe);ATC offre;ATC livr�;DR (ATC Performance);ATC Performance;NomATC;Motif commande (vente directe);Type de facture (vente directe);Description;N1groupe;N2groupe;N3groupe;N4groupe;N5groupe;N6groupe;N7groupe;N1groupedesignation;N2groupedesignation;N3groupedesignation;N4groupedesignation;N5groupedesignation;N6groupedesignation;N7groupedesignation;N1localedesignation;N2localedesignation;N3localedesignation;N4localedesignation;N5localedesignation;N6localedesignation;N7localedesignation;N1locale;N2locale;N3locale;N4locale;N5locale;N6locale;N7locale;Hi�rarchgroupe;Hi�rarchlocale;Client_direct_Nom du compte;Client direct_Groupe cible/Typologie g�n�rale;Client direct_Sous groupe cible/Typologie d�taill�e;Client direct_Compte principal: Num�ro du compte;Client direct_Compte principal: Nom du compte;Client;Num�ro client indirect;CODE_CMI;NOM_CMI;Nom du compte;Client Indirect_ Groupe cible/Typologie g�n�rale;Client Indirect_ Sous groupe cible/Typologie d�taill�e;Client Indirect_  Compte principal: Num�ro du compte;Client Indirect_  Compte principal: Nom du compte;Client Direct - Hi�rarchie N1 SAP ;Client Direct - Hi�rarchie N2 SAP ;Client Indirect - Hi�rarchie N1 SAP;Client Indirect - Hi�rarchie N2 SAP} as string",
						"     ),",
						"     partitionFileNames:['factorationAVM435145.vdb'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink3",
						"derivedColumn25 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['OModelPartedis.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink4",
						"Filtre43 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Org_commerciale as string,",
						"          {Canal distribution} as string,",
						"          {Secteur d'activit�} as string,",
						"          {Document de vente} as string,",
						"          Poste as string,",
						"          {Jour calendaire} as string,",
						"          {Agence commerciale corrig�} as string,",
						"          {ATC Corrig�} as string,",
						"          {Donneur d'ordre} as string,",
						"          {Recept de march} as string,",
						"          {Destinataire facture} as string,",
						"          {Type doc vente} as string,",
						"          {Type de poste} as string,",
						"          Livraison as string,",
						"          {Type de livraison} as string,",
						"          {Type poste Livraison} as string,",
						"          Facture as string,",
						"          {Type de facture} as string,",
						"          {Type poste Facture} as string,",
						"          {Mois calendrier} as string,",
						"          {Ann�e civile} as string,",
						"          {Motif commande} as string,",
						"          {CA cd�} as string,",
						"          {Qt� livr�e} as string,",
						"          {CA livr�} as string,",
						"          {Qt� factur�e} as string,",
						"          {CA factur�} as string,",
						"          {Cout standard cd�} as string,",
						"          {Cout fabrication} as string,",
						"          {Cout standard livr�} as string,",
						"          {Cout standard factur�} as string,",
						"          date_id as string,",
						"          year as string,",
						"          yearmonth as string,",
						"          qt_cd_e as string,",
						"          ca_cd_ as string,",
						"          qt_factur_e as string,",
						"          ca_factur_ as string,",
						"          reference as string,",
						"          WholeSalerID as string,",
						"          WholeSalerHubID as string,",
						"          HubName as string,",
						"          {P�riode} as string,",
						"          Offre as string,",
						"          month as string,",
						"          qte_ecoulement as string,",
						"          POSSAMidString as string,",
						"          HubSAPid as string,",
						"          distributeur as string,",
						"          agence_code as string,",
						"          marque as string,",
						"          {Code postal} as string,",
						"          marque_name as string,",
						"          qte_ecc as string,",
						"          ca_ecoulement as string,",
						"          data_origin as string,",
						"          {Ecoulement origin} as string,",
						"          canal_final as string,",
						"          {ATC performance} as string,",
						"          Canal as string",
						"     ),",
						"     partitionFileNames:['TestFacturation43.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sinkFact43",
						"select3 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Org_commerciale as string,",
						"          {Canal distribution} as string,",
						"          {Secteur d'activit�} as string,",
						"          {Document de vente} as string,",
						"          Poste as string,",
						"          {Jour calendaire} as string,",
						"          {Agence commerciale corrig�} as string,",
						"          {ATC Corrig�} as string,",
						"          {Donneur d'ordre} as string,",
						"          {Recept de march} as string,",
						"          {Destinataire facture} as string,",
						"          {Type doc vente} as string,",
						"          {Type de poste} as string,",
						"          Livraison as string,",
						"          {Type de livraison} as string,",
						"          {Type poste Livraison} as string,",
						"          Facture as string,",
						"          {Type de facture} as string,",
						"          {Type poste Facture} as string,",
						"          {Mois calendrier} as string,",
						"          {Ann�e civile} as string,",
						"          {Motif commande} as string,",
						"          {CA cd�} as string,",
						"          {Qt� livr�e} as string,",
						"          {CA livr�} as string,",
						"          {Qt� factur�e} as string,",
						"          {CA factur�} as string,",
						"          {Cout standard cd�} as string,",
						"          {Cout fabrication} as string,",
						"          {Cout standard livr�} as string,",
						"          {Cout standard factur�} as string,",
						"          date_id as string,",
						"          year as string,",
						"          yearmonth as string,",
						"          qt_cd_e as string,",
						"          ca_cd_ as string,",
						"          qt_factur_e as string,",
						"          ca_factur_ as string,",
						"          reference as string,",
						"          WholeSalerID as string,",
						"          WholeSalerHubID as string,",
						"          HubName as string,",
						"          {P�riode} as string,",
						"          Offre as string,",
						"          month as string,",
						"          qte_ecoulement as string,",
						"          POSSAMidString as string,",
						"          HubSAPid as string,",
						"          distributeur as string,",
						"          agence_code as string,",
						"          marque as string,",
						"          {Code postal} as string,",
						"          marque_name as string,",
						"          qte_ecc as string,",
						"          ca_ecoulement as string,",
						"          data_origin as string,",
						"          {Ecoulement origin} as string,",
						"          canal_final as string,",
						"          {ATC performance} as string,",
						"          Canal as string",
						"     ),",
						"     partitionFileNames:['TestAfterArticulationOffreJoin.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sinkAfterArticulatioOffreJoin"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/check_base_com')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "InputBaseCommercialMarketing",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "outtest",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "derivedColumn1"
						},
						{
							"name": "aggregate1"
						},
						{
							"name": "derivedColumn5"
						},
						{
							"name": "filter1"
						},
						{
							"name": "filter2"
						},
						{
							"name": "aggregate4"
						},
						{
							"name": "derivedColumn6"
						},
						{
							"name": "filter3"
						},
						{
							"name": "filter4"
						},
						{
							"name": "derivedColumn7"
						},
						{
							"name": "filter5"
						},
						{
							"name": "aggregate5"
						},
						{
							"name": "derivedColumn8"
						},
						{
							"name": "filter6"
						}
					],
					"scriptLines": [
						"source(output(",
						"          {affecte/non_affecte} as string,",
						"          {plateforme/vente directe} as string,",
						"          {origine de la ligne} as string,",
						"          year as string,",
						"          month as string,",
						"          {Code client livré} as string,",
						"          {code client plateforme livree} as string,",
						"          {code produit} as string,",
						"          quantite as string,",
						"          ca as string,",
						"          {Code postal du client livré} as string,",
						"          marque as string,",
						"          {ID marque} as string,",
						"          {ID canal de distribution} as string,",
						"          {Nom du canal} as string,",
						"          {Diffus/Chantier} as string,",
						"          {document_vente (vente directe)} as string,",
						"          {Agence commerciale corrigé (vente directe)} as string,",
						"          {Donneur d'ordre (vente directe)} as string,",
						"          {Facture (vente directe)} as string,",
						"          {Type poste Facture (vente directe)} as string,",
						"          {Numéro offre} as string,",
						"          {ATC Corrigé (vente directe)} as string,",
						"          {ATC offre} as string,",
						"          {ATC livré} as string,",
						"          {DR (ATC Performance)} as string,",
						"          {ATC Performance} as string,",
						"          NomATC as string,",
						"          {Motif commande (vente directe)} as string,",
						"          {Type de facture (vente directe)} as string,",
						"          Description as string,",
						"          N1groupe as string,",
						"          N2groupe as string,",
						"          N3groupe as string,",
						"          N4groupe as string,",
						"          N5groupe as string,",
						"          N6groupe as string,",
						"          N7groupe as string,",
						"          N1groupedesignation as string,",
						"          N2groupedesignation as string,",
						"          N3groupedesignation as string,",
						"          N4groupedesignation as string,",
						"          N5groupedesignation as string,",
						"          N6groupedesignation as string,",
						"          N7groupedesignation as string,",
						"          N1localedesignation as string,",
						"          N2localedesignation as string,",
						"          N3localedesignation as string,",
						"          N4localedesignation as string,",
						"          N5localedesignation as string,",
						"          N6localedesignation as string,",
						"          N7localedesignation as string,",
						"          N1locale as string,",
						"          N2locale as string,",
						"          N3locale as string,",
						"          N4locale as string,",
						"          N5locale as string,",
						"          N6locale as string,",
						"          N7locale as string,",
						"          {Hiérarchgroupe} as string,",
						"          {Hiérarchlocale} as string,",
						"          {Client_direct_Nom du compte} as string,",
						"          {Client direct_Groupe cible/Typologie générale} as string,",
						"          {Client direct_Sous groupe cible/Typologie détaillée} as string,",
						"          {Client direct_Compte principal: Numéro du compte} as string,",
						"          {Client direct_Compte principal: Nom du compte} as string,",
						"          Client as string,",
						"          {Numéro client indirect} as string,",
						"          CODE_CMI as string,",
						"          NOM_CMI as string,",
						"          {Nom du compte} as string,",
						"          {Client Indirect_ Groupe cible/Typologie générale} as string,",
						"          {Client Indirect_ Sous groupe cible/Typologie détaillée} as string,",
						"          {Client Indirect_  Compte principal: Numéro du compte} as string,",
						"          {Client Indirect_  Compte principal: Nom du compte} as string,",
						"          {Client Direct - Hiérarchie N1 SAP } as string,",
						"          {Client Direct - Hiérarchie N2 SAP } as string,",
						"          {Client Indirect - Hiérarchie N1 SAP} as string,",
						"          {Client Indirect - Hiérarchie N2 SAP} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> source1",
						"source1 derive(ca = toDouble(replace(ca,\",\",\".\")),",
						"          quantite = toInteger(quantite),",
						"          column1 = 1) ~> derivedColumn1",
						"filter4 aggregate(groupBy({plateforme/vente directe}),",
						"     ca = sum(toDouble(ca)),",
						"          quantite = sum(toInteger(quantite))) ~> aggregate1",
						"aggregate1 derive(ca = replace(toString(ca),\".\",\",\"),",
						"          quantite = replace(toString(quantite),\".\",\",\")) ~> derivedColumn5",
						"source1 filter(year==\"2021\" && {plateforme/vente directe}==\"plateforme vf\") ~> filter1",
						"filter1 filter({origine de la ligne}==\"facturation sans ecoulement\" || {origine de la ligne}==\"facturation avec matching\") ~> filter2",
						"derivedColumn6 aggregate(groupBy({code produit}),",
						"     nombre = count({code produit})) ~> aggregate4",
						"filter2 derive({code produit} = coalesce(toString(toInteger(replace({code produit}, \" \", \"\"))),replace({code produit}, \" \", \"\"))) ~> derivedColumn6",
						"derivedColumn1 filter(year==\"2021\") ~> filter3",
						"filter3 filter(in([\"facturation sans ecoulement\",\"facturation avec matching\"],{origine de la ligne})) ~> filter4",
						"source1 derive(ca = toDouble(replace(ca,\",\",\".\")),",
						"          quantite = toInteger(quantite),",
						"          column1 = 1) ~> derivedColumn7",
						"derivedColumn7 filter(year == '2021') ~> filter5",
						"filter6 aggregate(groupBy({plateforme/vente directe},",
						"          {origine de la ligne}),",
						"     ca = sum(toDouble(ca)),",
						"          quantite = sum(toInteger(quantite))) ~> aggregate5",
						"aggregate5 derive(ca = replace(toString(ca),\".\",\",\"),",
						"          quantite = replace(toString(quantite),\".\",\",\")) ~> derivedColumn8",
						"filter5 filter(in([\"decrementation ecoulement sans matching\",\"ecoulement sans matching\",\"facturation sans ecoulement\",\"facturation avec matching\"],{origine de la ligne})) ~> filter6",
						"aggregate4 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Column_1 as string",
						"     ),",
						"     partitionFileNames:['test_contratDist.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/cleaning')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "cleaning process after join",
				"folder": {
					"name": "REFERENTIEL/ATC"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "atc_lower",
								"type": "DatasetReference"
							},
							"name": "atcJoined"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "outReferentielATC",
								"type": "DatasetReference"
							},
							"name": "AtcprepareForReplicate"
						},
						{
							"dataset": {
								"referenceName": "outReferentielCTRCTT",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "renamle"
						},
						{
							"name": "canalFinal"
						},
						{
							"name": "filtreCodePostal"
						},
						{
							"name": "dd"
						},
						{
							"name": "Flatten1"
						},
						{
							"name": "dd1"
						},
						{
							"name": "codePostalUpdate"
						},
						{
							"name": "DerivedColumn1"
						},
						{
							"name": "Filter1"
						},
						{
							"name": "Filter3"
						},
						{
							"name": "Filter4"
						},
						{
							"name": "Filter5"
						},
						{
							"name": "Select1"
						},
						{
							"name": "Filter6"
						}
					],
					"script": "source(output(\n\t\t{Clé Référentiel} as string,\n\t\t{Recherche Clé EPS} as string,\n\t\tMarque as string,\n\t\t{Code Postal début} as integer,\n\t\t{Code Postal fin} as integer,\n\t\tUtilisateur as string,\n\t\tFonction as string,\n\t\t{Département} as string,\n\t\tDR as string,\n\t\t{ID SAP} as string,\n\t\t{Diffus/Chantier} as string,\n\t\t{Plan prime} as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false) ~> atcJoined\nDerivedColumn1 select(mapColumn(\n\t\t{Clé Référentiel},\n\t\t{Recherche Clé EPS},\n\t\tMarque,\n\t\t{Code Postal début},\n\t\t{Code Postal fin},\n\t\tUtilisateur,\n\t\tFonction,\n\t\t{Département},\n\t\tATC = {ID SAP},\n\t\tNomATC = Utilisateur,\n\t\t{Plan primes} = {Plan prime},\n\t\tMatricule = {ID SAP},\n\t\tDR\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> renamle\nrenamle derive({Canal final} = iif( in([\"Vaillant diffus\",\"SD diffus\",'Diffus'], {Plan primes}), \"Diffus\" ,\"Chantier\" ),\n\t\ttoreplicate = {Code Postal fin}-{Code Postal début}+1) ~> canalFinal\ncanalFinal filter({Code Postal début}<= {Code Postal fin}) ~> filtreCodePostal\nfiltreCodePostal derive(dd = mapLoop(abs(toInteger(toreplicate)), #index)) ~> dd\ndd foldDown(unroll(dd, dd),\n\tmapColumn(\n\t\tMarque,\n\t\t{Code Postal début},\n\t\t{Code Postal fin},\n\t\tUtilisateur,\n\t\tFonction,\n\t\t{Département},\n\t\tATC,\n\t\tNomATC = Utilisateur,\n\t\t{Plan primes},\n\t\tMatricule = ATC,\n\t\t{Canal final},\n\t\ttoreplicate,\n\t\tdd,\n\t\tDR\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> Flatten1\nFlatten1 derive(dd = toInteger(dd) -1) ~> dd1\ndd1 derive({Code postal} = {Code Postal début}+dd) ~> codePostalUpdate\natcJoined derive({ID SAP} = toInteger({ID SAP})) ~> DerivedColumn1\ncanalFinal filter(ATC==16400015) ~> Filter1\nrenamle filter(ATC==16400015) ~> Filter3\ncodePostalUpdate filter(in(['Attaché commercial prescription','Attaché commercial réseau 2','Attaché commercial réseau' ], Fonction)) ~> Filter4\ncodePostalUpdate filter(in(['Conseiller Technique Thermodynamique' ,'Conseiller technique régional'], Fonction)) ~> Filter5\nFilter5 select(mapColumn(\n\t\tMarque,\n\t\t{Code Postal début},\n\t\t{Code Postal fin},\n\t\tUtilisateur,\n\t\tFonction,\n\t\t{Département},\n\t\tIDSAP = ATC,\n\t\tNom = NomATC,\n\t\t{Plan primes},\n\t\tMatricule,\n\t\t{Canal final},\n\t\ttoreplicate,\n\t\tdd,\n\t\tDR,\n\t\t{Code postal}\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select1\nFilter4 filter(!isNull(ATC)) ~> Filter6\nFilter6 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tpartitionFileNames:['referentiel_atc.csv'],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tpartitionBy('hash', 1)) ~> AtcprepareForReplicate\nSelect1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\t{SAUNIER DUVAL} as string,\n\t\t{208.0} as string,\n\t\t{Pièces détachées pour chauffage} as string,\n\t\t{05608600} as string,\n\t\t{5272.0} as string,\n\t\t{33.0} as string,\n\t\t{0.0} as string,\n\t\t{202008} as string,\n\t\t{2020} as string,\n\t\t{08} as string\n\t),\n\tpartitionFileNames:['referentiel_CTRCTT.csv'],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tpartitionBy('hash', 1)) ~> sink1"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/cout')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "o\tPour le cout\n\tPrendre la facturation « brute » en sortie de SAP/BW\n\tFiltrer les lignes ou le donneur d’ordre est un CTT\n•\tQuestion 2bis (cf plus haut) : il semblerait que nous ayons besoin ID du CTT ?\n\tFiltrer certaines raisons de commandes et de types de document\n•\tQuestion 3 : pouvez-vous nous transmettre le détail des filtres svp ?\n\tLa colonne de cout en sortie sera le « cout standard » présent dans la facturation \n\tAjouter l’information de VMC (en euros) en faisant la jointure en avec le nouveau référentiel VMC (info non dispo dans l’extract à date BW)\n\tAjouter les méta données produits, client, CTT, comme dans la base commerciale\n",
				"folder": {
					"name": "SORTIE MARKETING"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "facturationBW_AC",
								"type": "DatasetReference"
							},
							"name": "inputFacturation"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "outMarketingCout",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "Select1"
						}
					],
					"script": "source(output(\n\t\t{Org. commerciale} as string,\n\t\t{Canal distribution} as string,\n\t\t{Secteur d'activité} as string,\n\t\t{Document de vente} as string,\n\t\tPoste as string,\n\t\t{Jour calendaire} as string,\n\t\t{1ereDateLivrDdee} as string,\n\t\t{Agence commerciale corrigé} as string,\n\t\t{ATC Corrigé} as string,\n\t\t{Donneur d'ordre} as string,\n\t\t{Récept. de march.} as string,\n\t\t{Destinataire facture} as string,\n\t\tArticle as string,\n\t\t{Type doc. vente} as string,\n\t\t{Type de poste} as string,\n\t\tLivraison as string,\n\t\t{Type de livraison} as string,\n\t\t{Type poste Livraison} as string,\n\t\tFacture as string,\n\t\t{Type de facture} as string,\n\t\t{Type poste Facture} as string,\n\t\t{Mois calendrier} as string,\n\t\t{Année civile} as string,\n\t\t{Motif commande} as string,\n\t\t{Qté cdée} as string,\n\t\t{CA cdé} as string,\n\t\t{Qté livrée} as string,\n\t\t{CA livré} as string,\n\t\t{Qté facturée} as string,\n\t\t{CA facturé} as string,\n\t\t{Cout standard cdé} as string,\n\t\t{Cout fabrication} as string,\n\t\t{Cout standard livré} as string,\n\t\t{Cout standard facturé} as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false) ~> inputFacturation\ninputFacturation select(mapColumn(\n\t\t{Org. commerciale},\n\t\t{Canal distribution},\n\t\t{Secteur d'activité},\n\t\t{Document de vente},\n\t\tPoste,\n\t\t{Jour calendaire},\n\t\t{Agence commerciale corrigé},\n\t\t{ATC Corrigé},\n\t\t{Donneur d'ordre},\n\t\t{Récept. de march.},\n\t\t{Destinataire facture},\n\t\tArticle,\n\t\t{Type doc. vente},\n\t\t{Type de poste},\n\t\tLivraison,\n\t\t{Type de livraison},\n\t\t{Type poste Livraison},\n\t\tFacture,\n\t\t{Type de facture},\n\t\t{Type poste Facture},\n\t\t{Mois calendrier},\n\t\t{Année civile},\n\t\t{Motif commande},\n\t\t{Cout standard cdé},\n\t\t{Cout fabrication},\n\t\t{Cout standard livré},\n\t\t{Cout standard facturé}\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select1\nSelect1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tpartitionFileNames:['MarketingCout.csv'],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tpartitionBy('hash', 1)) ~> sink1"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/lower_data')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "REFERENTIEL/ATC"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ref_affectation",
								"type": "DatasetReference"
							},
							"name": "refaffectation"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "atc_affectation_lower",
								"type": "DatasetReference"
							},
							"name": "atcAffectationLower"
						}
					],
					"transformations": [
						{
							"name": "DerivedColumn1"
						},
						{
							"name": "filteredcolumnsrefrefaffectation"
						},
						{
							"name": "DerivedColumn3"
						},
						{
							"name": "Select2"
						},
						{
							"name": "Filter2"
						},
						{
							"name": "Filter3"
						}
					],
					"script": "source(output(\n\t\t{Clé Référentiel} as string,\n\t\t{Recherche Clé EPS} as string,\n\t\tMarque as string,\n\t\t{Code Postal début} as string,\n\t\t{Code Postal fin} as string,\n\t\tUtilisateur as string,\n\t\tFonction as string,\n\t\t{Département} as string,\n\t\tDR as string,\n\t\t{ID SAP} as string,\n\t\t{Lancement Maj Affectation} as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false) ~> refaffectation\nSelect2 derive(Utilisateur = Utilisateur) ~> DerivedColumn1\nDerivedColumn1 select(mapColumn(\n\t\t{Clé Référentiel},\n\t\t{Recherche Clé EPS},\n\t\tMarque,\n\t\t{Code Postal début},\n\t\t{Code Postal fin},\n\t\tUtilisateur,\n\t\tFonction,\n\t\t{Département},\n\t\tDR,\n\t\t{ID SAP}\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> filteredcolumnsrefrefaffectation\nfilteredcolumnsrefrefaffectation derive({Plan prime} = iif( Fonction== \"Attaché commercial réseau\" || Fonction == \"Attaché commercial réseau 2\" , \"Diffus\", iif( Fonction == \"Attaché commercial prescription\"  , \"Chantier\", \"\"  )  )) ~> DerivedColumn3\nFilter2 select(mapColumn(\n\t\t{Clé Référentiel},\n\t\t{Recherche Clé EPS},\n\t\tMarque,\n\t\t{Code Postal début},\n\t\t{Code Postal fin},\n\t\tUtilisateur,\n\t\tFonction,\n\t\t{Département},\n\t\tDR,\n\t\t{ID SAP}\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select2\nrefaffectation filter(in(['Attaché commercial prescription','Attaché commercial réseau 2','Attaché commercial réseau' ,'Conseiller Technique Thermodynamique' ,'Conseiller technique régional'], Fonction)) ~> Filter2\nFilter2 filter({ID SAP}==\"16400015\") ~> Filter3\nDerivedColumn3 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tpartitionFileNames:['atc_affectation_lower.csv'],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tpartitionBy('hash', 1)) ~> atcAffectationLower"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DSCTEREVA_copy1')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "BASE COMMERCIALE"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "InEcoulementWithIndexDSC",
								"type": "DatasetReference"
							},
							"name": "ecoulementwithIndex"
						},
						{
							"dataset": {
								"referenceName": "In_avoirwithIndex",
								"type": "DatasetReference"
							},
							"name": "avoirwithIndex"
						},
						{
							"dataset": {
								"referenceName": "STG_OFFRE_SOURCE",
								"type": "DatasetReference"
							},
							"name": "stgOffre"
						},
						{
							"dataset": {
								"referenceName": "ref_atc",
								"type": "DatasetReference"
							},
							"name": "referentielATC"
						},
						{
							"dataset": {
								"referenceName": "inFacturationDSC",
								"type": "DatasetReference"
							},
							"name": "facturation"
						},
						{
							"dataset": {
								"referenceName": "InPrixMoyenSplited",
								"type": "DatasetReference"
							},
							"name": "prixMoyen"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "avoirUnMappedutput",
								"type": "DatasetReference"
							},
							"name": "avoirUnMapped"
						}
					],
					"transformations": [
						{
							"name": "fullLeft"
						},
						{
							"name": "caFinal"
						},
						{
							"name": "RenameLeft"
						},
						{
							"name": "outerLeft"
						},
						{
							"name": "columnChoiceEcoulement"
						},
						{
							"name": "renameAvoir"
						},
						{
							"name": "innerAvoir"
						},
						{
							"name": "canal"
						},
						{
							"name": "idCanal"
						},
						{
							"name": "idCanalFinal"
						},
						{
							"name": "Select1"
						},
						{
							"name": "uniqueOffre"
						},
						{
							"name": "fullLeftOffre"
						},
						{
							"name": "EndInner",
							"description": "Autogenerated by data preview actions"
						},
						{
							"name": "fullLeftUnion"
						},
						{
							"name": "canalFinal"
						},
						{
							"name": "atcKeepingColumn"
						},
						{
							"name": "atcNotNull"
						},
						{
							"name": "uniqueATC"
						},
						{
							"name": "typeCaste"
						},
						{
							"name": "Aggregate2"
						},
						{
							"name": "dropColumns"
						},
						{
							"name": "DerivedColumn2"
						},
						{
							"name": "JoinAvoir"
						},
						{
							"name": "FilterIndexCols2"
						},
						{
							"name": "columnsChoice"
						},
						{
							"name": "Filter8"
						},
						{
							"name": "DerivedColumn4"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "columnChoicePrix"
						},
						{
							"name": "prepareGetPeriode"
						},
						{
							"name": "join2"
						},
						{
							"name": "fillNaPeriodeFact"
						}
					],
					"script": "source(output(\n\t\tyearmonth as string,\n\t\tyear as string,\n\t\tmonth as string,\n\t\tqte_ecoulement as string,\n\t\tca_ecoulement as string,\n\t\tPOSSAMidString as string,\n\t\tHubSAPid as string,\n\t\treference as string,\n\t\tdistributeur as string,\n\t\tagence_code as string,\n\t\tmarque as string,\n\t\t{Code postal} as string,\n\t\tmarque_name as string,\n\t\ttoreplicate as string,\n\t\tdd as string,\n\t\trcount as string,\n\t\tindexcols2 as string,\n\t\tqte_ecc as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false) ~> ecoulementwithIndex\nsource(output(\n\t\tMois_Selection as string,\n\t\tNoOffre as string,\n\t\tNoArtVGF as string,\n\t\tAgence as string,\n\t\tQte_Validee_VGF as string,\n\t\tNoCli as string,\n\t\tPA_Valide_VGF as string,\n\t\tMois as string,\n\t\t{Année} as string,\n\t\tCompanyId as string,\n\t\tHubSAPid as string,\n\t\ttoreplicate as string,\n\t\tca_avoir as string,\n\t\tyearmonth as string,\n\t\tPOSid as string,\n\t\tWholeSalerID as string,\n\t\tdd as string,\n\t\tindexcols2 as string,\n\t\tqte_avoir as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false) ~> avoirwithIndex\nsource(output(\n\t\tDateOffre as string,\n\t\t{Référence} as string,\n\t\tMarque as string,\n\t\t{Quantité} as string,\n\t\tClient as string,\n\t\tResponsable as string,\n\t\tOffre as string,\n\t\tCodeATC as string,\n\t\tCanal as string,\n\t\tProduit as string,\n\t\t{Créateur offre} as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false) ~> stgOffre\nsource(output(\n\t\tMarque as string,\n\t\t{Code Postal début} as string,\n\t\t{Code Postal fin} as string,\n\t\tUtilisateur as string,\n\t\tFonction as string,\n\t\t{Département} as string,\n\t\tATC as string,\n\t\tNomATC as string,\n\t\t{Plan primes} as string,\n\t\tMatricule as string,\n\t\t{Canal final} as string,\n\t\ttoreplicate as string,\n\t\tdd as string,\n\t\tDR as string,\n\t\t{Code postal} as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false) ~> referentielATC\nsource(output(\n\t\t{Org commerciale} as string,\n\t\t{Canal distribution} as string,\n\t\t{Secteur d'activité} as string,\n\t\t{Document de vente} as string,\n\t\tPoste as string,\n\t\t{Jour calendaire} as string,\n\t\t{Agence commerciale corrigé} as string,\n\t\t{ATC Corrigé} as string,\n\t\t{Donneur d'ordre} as string,\n\t\t{recept de march} as string,\n\t\t{Destinataire facture} as string,\n\t\t{type doc vente} as string,\n\t\t{Type de poste} as string,\n\t\tLivraison as string,\n\t\t{Type de livraison} as string,\n\t\t{Type poste Livraison} as string,\n\t\tFacture as string,\n\t\t{Type de facture} as string,\n\t\t{Type poste Facture} as string,\n\t\t{Mois calendrier} as string,\n\t\t{Année civile} as string,\n\t\t{Motif commande} as string,\n\t\t{Qté cdée} as string,\n\t\t{CA cdé} as string,\n\t\t{Qté livrée} as string,\n\t\t{CA livré} as string,\n\t\t{Qté facturée} as string,\n\t\t{CA facturé} as string,\n\t\t{Cout standard cdé} as string,\n\t\t{Cout fabrication} as string,\n\t\t{Cout standard livré} as string,\n\t\t{Cout standard facturé} as string,\n\t\tdate_id as string,\n\t\tyear as string,\n\t\tyearmonth as string,\n\t\tqt_cd_e as string,\n\t\tca_cd_ as string,\n\t\tqt_livr_e as string,\n\t\tca_livr_ as string,\n\t\tqt_factur_e as string,\n\t\tca_factur_ as string,\n\t\tyear_month as string,\n\t\treference as string,\n\t\tarticle as string,\n\t\tprix_unitaire_std as string,\n\t\tWholeSalerID as string,\n\t\tWholeSalerHubID as string,\n\t\tHubName as string,\n\t\tHubSAPid as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false) ~> facturation\nsource(output(\n\t\tArticle as string,\n\t\tDistributeur as string,\n\t\tprix_unitaire as string,\n\t\t{Durée_période} as string,\n\t\t{Période} as string,\n\t\t{Mois début} as string,\n\t\t{Mois fin} as string,\n\t\tmois1 as string,\n\t\tannee1 as string,\n\t\tmois2 as string,\n\t\tannee2 as string,\n\t\tdd as string,\n\t\tmonth as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false) ~> prixMoyen\ncolumnChoiceEcoulement, renameAvoir join(columnChoiceEcoulement@indexcols2 == renameAvoir@indexcols2,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> fullLeft\nRenameLeft derive(ca_final = toDouble(ca_ecoulement),\n\t\tqt_final = toInteger(qte_ecc ),\n\t\tdata_origin = \"ecoulement\",\n\t\tid_canal_final = 42) ~> caFinal\nouterLeft select(mapColumn(\n\t\tyearmonth = columnChoiceEcoulement@yearmonth,\n\t\tyear,\n\t\tmonth,\n\t\tqte_ecoulement,\n\t\tca_ecoulement,\n\t\tPOSSAMidString,\n\t\tHubSAPid = columnChoiceEcoulement@HubSAPid,\n\t\treference,\n\t\tdistributeur,\n\t\tmarque,\n\t\t{Code postal},\n\t\tmarque_name,\n\t\tqte_ecc\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> RenameLeft\nfullLeft filter(isNull(renameAvoir@indexcols2)) ~> outerLeft\necoulementwithIndex select(mapColumn(\n\t\tyearmonth,\n\t\tyear,\n\t\tmonth,\n\t\tqte_ecoulement,\n\t\tca_ecoulement,\n\t\tPOSSAMidString,\n\t\tHubSAPid,\n\t\treference,\n\t\tdistributeur,\n\t\tmarque,\n\t\t{Code postal},\n\t\tmarque_name,\n\t\tindexcols2,\n\t\tqte_ecc\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> columnChoiceEcoulement\navoirwithIndex select(mapColumn(\n\t\tMois_Selection,\n\t\tNoOffre,\n\t\tNoArtVGF,\n\t\tAgence,\n\t\tQte_Validee_VGF,\n\t\tNoCli,\n\t\tPA_Valide_VGF,\n\t\tMois,\n\t\t{Année},\n\t\tCompanyId,\n\t\tHubSAPid,\n\t\ttoreplicate,\n\t\tca_avoir,\n\t\tyearmonth,\n\t\tPOSid,\n\t\tindexcols2,\n\t\tqte_avoir\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> renameAvoir\ncolumnChoiceEcoulement, renameAvoir join(columnChoiceEcoulement@indexcols2 == renameAvoir@indexcols2,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> innerAvoir\ninnerAvoir derive(canal = iif(substring(NoOffre,1,2)==\"FP\", \"FP\", \n    iif(substring(NoOffre,1,2)==\"FS\", \"FS\", \"FC\")),\n\t\tyearmonth = renameAvoir@yearmonth,\n\t\tyear = {Année},\n\t\tmonth = Mois) ~> canal\ncanal derive(id_canal_final = iif(canal==\"FP\", 45, \n    iif(canal==\"FS\", 51, \n    iif(canal==\"FC\", 43, 42))),\n\t\tca_final = toDouble(qte_avoir)*toDouble(ca_avoir),\n\t\tqt_final = toInteger(qte_avoir)) ~> idCanal\nidCanal derive(canal_final = iif(id_canal_final==43, \"Chantier\", 'Diffus'),\n\t\tdata_origin = \"ecoulement retraité\") ~> idCanalFinal\nstgOffre select(mapColumn(\n\t\tNoOffre = Offre,\n\t\t{ATC Performance} = CodeATC,\n\t\tCanal\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select1\nSelect1 aggregate(groupBy(NoOffre,\n\t\t{ATC Performance}),\n\tCanal = max(Canal)) ~> uniqueOffre\nidCanalFinal, uniqueOffre join(renameAvoir@NoOffre == uniqueOffre@NoOffre,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> fullLeftOffre\ndropColumns select(mapColumn(\n\t\tyearmonth,\n\t\tyear,\n\t\tmonth,\n\t\tqte_ecoulement,\n\t\tqte_ecc,\n\t\tca_ecoulement,\n\t\tPOSSAMidString,\n\t\tHubSAPid,\n\t\treference,\n\t\tdistributeur,\n\t\tmarque,\n\t\t{Code postal},\n\t\tmarque_name,\n\t\tNoOffre,\n\t\tAgence,\n\t\tQte_Validee_VGF,\n\t\tNoCli,\n\t\tPA_Valide_VGF,\n\t\tCompanyId,\n\t\tca_avoir,\n\t\tcanal,\n\t\tca_final,\n\t\tqt_final,\n\t\tid_canal_final,\n\t\tcanal_final,\n\t\t{ATC Performance},\n\t\tdata_origin\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> EndInner\ncaFinal, EndInner union(byName: true)~> fullLeftUnion\nfullLeftUnion derive(canal_final = iif(id_canal_final==43, \"Chantier\", \"Diffus\")) ~> canalFinal\nreferentielATC select(mapColumn(\n\t\tMarque,\n\t\tATC,\n\t\tNomATC,\n\t\tMatricule,\n\t\t{Canal final},\n\t\tcode_postal_atc = {Code postal}\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> atcKeepingColumn\nDerivedColumn4 filter(!isNull(ATC)) ~> atcNotNull\natcNotNull aggregate(groupBy(code_postal_atc,\n\t\t{Canal final},\n\t\tMarque),\n\tATC = max(ATC),\n\t\tNomATC = max(NomATC),\n\t\tMatricule = max(Matricule)) ~> uniqueATC\nfacturation derive(qt_cd_e = toInteger(qt_cd_e),\n\t\tca_cd_ = toInteger(qt_factur_e),\n\t\tqt_livr_e = toInteger(qt_livr_e),\n\t\tqt_factur_e = toInteger(qt_factur_e),\n\t\tca_livr_ = toDouble(ca_livr_),\n\t\tca_factur_ = toDouble(ca_factur_),\n\t\ttempDist = iif(lower(WholeSalerID)=='ancs - accueil négoce chauffage sanitaire','partedis',  iif(instr(lower(WholeSalerID), 'trva - tereva' )>0, 'tereva',    iif(instr(lower(WholeSalerID), 'dsc')>0, 'dsc',     iif(instr(lower(WholeSalerID), 'vf' )>0, 'vf_confort', \tiif(instr(lower(WholeSalerID), 'sonac' )>0, 'sonac',lower(WholeSalerID))))))) ~> typeCaste\nfillNaPeriodeFact aggregate(groupBy(reference,\n\t\tHubSAPid,\n\t\tyear,\n\t\t{Période}),\n\tqt_cd_e = sum(qt_cd_e),\n\t\tca_cd_ = sum(ca_cd_),\n\t\tqt_livr_e = sum(qt_livr_e),\n\t\tca_livr_ = sum(ca_livr_),\n\t\tqt_factur_e = sum(qt_factur_e),\n\t\tca_factur_ = sum(ca_factur_),\n\t\t{Canal distribution} = first({Canal distribution}),\n\t\t{Org commerciale} = first({Org commerciale}),\n\t\t{recept de march} = first({recept de march})) ~> Aggregate2\nfullLeftOffre select(mapColumn(\n\t\tyearmonth,\n\t\tyear,\n\t\tmonth,\n\t\tqte_ecoulement,\n\t\tqte_ecc,\n\t\tca_ecoulement,\n\t\tPOSSAMidString,\n\t\tHubSAPid = columnChoiceEcoulement@HubSAPid,\n\t\treference,\n\t\tdistributeur,\n\t\tmarque,\n\t\t{Code postal},\n\t\tmarque_name,\n\t\tindexcols2 = columnChoiceEcoulement@indexcols2,\n\t\tAgence,\n\t\tQte_Validee_VGF,\n\t\tNoCli,\n\t\tPA_Valide_VGF,\n\t\tCompanyId,\n\t\tHubSAPid = renameAvoir@HubSAPid,\n\t\tca_avoir,\n\t\tPOSid,\n\t\tindexcols2 = renameAvoir@indexcols2,\n\t\tcanal = canal@canal,\n\t\tca_final,\n\t\tqt_final,\n\t\tid_canal_final,\n\t\tcanal_final,\n\t\tdata_origin,\n\t\t{ATC Performance},\n\t\tNoOffre = renameAvoir@NoOffre\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> dropColumns\nAggregate2 derive(tempOrigin = \"facturation\",\n\t\t{Canal distribution} = 42) ~> DerivedColumn2\ncolumnChoiceEcoulement, renameAvoir join(columnChoiceEcoulement@indexcols2 == renameAvoir@indexcols2,\n\tjoinType:'right',\n\tbroadcast: 'auto')~> JoinAvoir\nJoinAvoir filter(isNull(columnChoiceEcoulement@indexcols2)) ~> FilterIndexCols2\nFilterIndexCols2 select(mapColumn(\n\t\tMois_Selection,\n\t\tNoOffre,\n\t\tNoArtVGF,\n\t\tAgence,\n\t\tQte_Validee_VGF,\n\t\tNoCli,\n\t\tPA_Valide_VGF,\n\t\tMois,\n\t\t{Année},\n\t\tCompanyId,\n\t\tHubSAPid = renameAvoir@HubSAPid,\n\t\ttoreplicate,\n\t\tca_avoir,\n\t\tyearmonth = renameAvoir@yearmonth,\n\t\tPOSid,\n\t\tindexcols2 = renameAvoir@indexcols2,\n\t\tqte_avoir\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> columnsChoice\nuniqueATC filter(code_postal_atc==3300) ~> Filter8\natcKeepingColumn derive(code_postal_atc = toInteger(code_postal_atc)) ~> DerivedColumn4\nprixMoyen derive({Période} = iif(length({Période})>1,{Période},\"0\"+{Période})) ~> derivedColumn1\nderivedColumn1 select(mapColumn(\n\t\tArticle,\n\t\tDistributeur,\n\t\t{Période},\n\t\tannee2,\n\t\tmonth\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> columnChoicePrix\ncanalFinal select(mapColumn(\n\t\tyearmonth,\n\t\tyear,\n\t\tmonth,\n\t\tqte_ecoulement,\n\t\tca_ecoulement,\n\t\tPOSSAMidString,\n\t\tHubSAPid,\n\t\treference,\n\t\tdistributeur,\n\t\tmarque,\n\t\t{Code postal},\n\t\tmarque_name,\n\t\tqte_ecc,\n\t\tca_final,\n\t\tqt_final,\n\t\tdata_origin,\n\t\tid_canal_final,\n\t\tNoOffre,\n\t\tAgence,\n\t\tQte_Validee_VGF,\n\t\tNoCli,\n\t\tPA_Valide_VGF,\n\t\tCompanyId,\n\t\tca_avoir,\n\t\tcanal,\n\t\tcanal_final,\n\t\t{ATC Performance}\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> prepareGetPeriode\ntypeCaste, columnChoicePrix join(replace(lower(tempDist), \" \", \"\") == replace(lower(Distributeur), \" \", \"\")\n\t&& toInteger(year) == toInteger(annee2)\n\t&& toInteger({Mois calendrier}) == toInteger(month)\n\t&& coalesce(toString(toInteger(replace(reference, \" \", \"\"))),replace(reference, \" \", \"\")) == coalesce(toString(toInteger(replace(columnChoicePrix@Article, \" \", \"\"))),replace(columnChoicePrix@Article, \" \", \"\")),\n\tjoinType:'left',\n\tbroadcast: 'auto')~> join2\njoin2 derive({Période} = coalesce( {Période}, \"00\" )) ~> fillNaPeriodeFact\ncolumnsChoice sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\t{Marque DESC} as string,\n\t\t{Marque Code} as string,\n\t\t{Sous Famille} as string,\n\t\t{Référence Article Fournisseur} as string,\n\t\t{Agence Code} as string,\n\t\t{Département ID} as string,\n\t\t{Quantité en UV BL} as string,\n\t\tyearmonth as string,\n\t\tyear as string,\n\t\tmonth as string,\n\t\tPOSid as string,\n\t\tWholeSalerID as string,\n\t\tPOSSAMidString as string,\n\t\tHubSAPid as string,\n\t\tBrandID as string\n\t),\n\tpartitionFileNames:['avoirUnMapped.csv'],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tpartitionBy('hash', 1)) ~> avoirUnMapped"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/FICHIER_BW')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Facturation",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "FacturationBW",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"AC": {},
									"AP": {},
									"SortieFacturationBW": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Commande",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "CommandeBW",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"AC": {},
									"AP": {},
									"SortieCommandeBW": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Expedition",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "ExpeditionBW",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"AC": {},
									"AP": {},
									"SortieExpeditionBW": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "SORTIE LOGISTIQUE"
				},
				"annotations": [],
				"lastPublishTime": "2022-01-06T12:25:16Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/NOMENCLATURE_CLIENT')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "NomenclatureClient",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "NOMENCLATURE_CLIENT",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"EXtractionSAP": {},
									"ReferentielAtc4": {},
									"SortieNomenclatureClient": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "SORTIE LOGISTIQUE"
				},
				"annotations": [],
				"lastPublishTime": "2022-01-06T12:25:17Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/NOMENCLATURE_PRODUIT')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "NomenclatureProduit",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "NOMENCLATURE_PRODUIT",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"hierarchieArticle": {},
									"nomenclatureProduit": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "SORTIE LOGISTIQUE"
				},
				"annotations": [],
				"lastPublishTime": "2022-01-06T12:25:16Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_CALCUL_REM')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "CALCUL REMUNERATION",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "CALCUL_REMUNERATION_WITH_DATE",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"contratCadre": {},
									"contrat": {},
									"article": {},
									"baseCommerciale": {},
									"templateContrat": {},
									"calculRem": {},
									"CALCULREMUNERATION": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "CONTRAT DISTRIBUTION"
				},
				"annotations": [],
				"lastPublishTime": "2022-01-06T12:25:16Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_CALCUL_SEUIL')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "CALCUL SEUIL",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "CALCUL_SEUIL_WITH_DATE",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"contratCadre": {},
									"contrat": {},
									"levier": {},
									"article": {},
									"baseCommerciale": {},
									"templateContrat": {},
									"calculRem": {},
									"CALCULSEUIL": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "CONTRAT DISTRIBUTION"
				},
				"annotations": [],
				"lastPublishTime": "2022-01-06T12:25:17Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_CONTRAT_DISTRIBUTION')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "CALCUL SEUIL",
						"description": "Input : \ncontratCadre\ncontrat\nlevier\narticle\nbaseCommerciale\ntemplateContrat\ncalculRem\nOutput : \nOUTPUT_CALCUL_SEUIL",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "CALCUL_SEUIL_WITH_DATE",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"contratCadre": {},
									"contrat": {},
									"levier": {},
									"article": {},
									"baseCommerciale": {},
									"templateContrat": {},
									"calculRem": {},
									"CALCULSEUIL": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "CALCUL REMUNERATION",
						"description": "Input : \ncontratCadre\ncontrat\narticle\nbaseCommerciale\ntemplateContrat\ncalculRem\nOutput : \nOUTPUT_CALCUL_REMUNERATION",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "CALCUL_REMUNERATION_WITH_DATE",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"contratCadre": {},
									"contrat": {},
									"article": {},
									"baseCommerciale": {},
									"templateContrat": {},
									"calculRem": {},
									"CALCULREMUNERATION": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "CONTRAT DISTRIBUTION",
						"description": "Input : \nseuil\nremuneration\nOutput : \nCONTRAT_DISTRIBUTION",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "CALCUL SEUIL",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "CALCUL REMUNERATION",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "CONTRAT_DISTRIBUTION",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"seuil": {},
									"remuneration": {},
									"CONTRATDISTRIBUTION": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "CONTRAT DISTRIBUTION"
				},
				"annotations": [],
				"lastPublishTime": "2022-01-06T12:25:16Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_DSC')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "DSC_PREPARATION",
						"description": "Input : \nDSCINPUT\norganisation\nventesDirectes\nOutput : \noutputNullQuantity\norgaNotFound\npreparedDSC\nDSCPieceDetache",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "importDataDSC",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "DSC_PREPARATION",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"DSCINPUT": {},
									"organisation": {},
									"ventesDirectes": {},
									"DSCPieceDetache": {},
									"outputNullQuantity": {},
									"preparedDSC": {},
									"orgaNotFound": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "importDataDSC",
						"description": "import all file un folder",
						"type": "AzureFunctionActivity",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 1,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"functionName": "AF_IMPORT_ECOUL_DSC ",
							"method": "POST",
							"headers": {},
							"body": {
								"inputContainer": "data-input",
								"inputFolderPath": "Ecoulement/DSC",
								"outputContainer": "data-warehouse",
								"outputpath": "Temp/DSC_ECOULEMENT.csv"
							}
						},
						"linkedServiceName": {
							"referenceName": "AzureFunctionPremium",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "PREPARATION ECOULEMENT"
				},
				"annotations": [],
				"lastPublishTime": "2022-01-06T12:25:16Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_EHS')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "EHS",
						"description": "Input : \nEHS\norganisation\nventesDirectes\nOutput : \norgaNotFound\nSoriteEHS",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "EHS_PREPARATION",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"EHS": {},
									"OrganisationEHS": {},
									"VenteDirecte": {},
									"SoriteEHS": {},
									"EHSOrganisationNotfound": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "PREPARATION ECOULEMENT"
				},
				"annotations": [],
				"lastPublishTime": "2022-01-06T12:25:16Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_GET_ARTICLE_DESIGNATION')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "article_designation",
						"description": "Input : \narticleHierarchie\ndetailArticleHierarchie\nOutput : \nsortieArticleDesignation\n",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "REFERENTIEL_ARTICLE",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"articleHierarchie": {},
									"detailArticleHierarchie": {},
									"sortieArticleDesignation": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "REFERENTIEL"
				},
				"annotations": [],
				"lastPublishTime": "2022-01-06T12:25:17Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_LEVIER_RH')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "LEVIER RH",
						"description": "Input : \ndataCommerciale\nPLATEFORMES\nlevierPerformance\nOutput : \nTEMP_LEVIER_RH\nTEMP_LEVIER_PERFORMANCE\n",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "LEVIER_RH",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"dataCommerciale": {},
									"PLATEFORMES": {},
									"levierPerformance": {},
									"filtre": {},
									"sink2": {},
									"REFERENTIELPYTHON": {},
									"sortieFiltre": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "AF CALCUL LEVIER RH",
						"type": "AzureFunctionActivity",
						"dependsOn": [
							{
								"activity": "LEVIER RH",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"functionName": "AF_CALCUL_LEVIER_RH",
							"method": "POST",
							"headers": {},
							"body": {
								"levierContainer": "data-warehouse",
								"levierRHpath": "Temp/TEMP_LEVIER_RH.csv",
								"levierPerformancePath": "Temp/TEMP_LEVIER_PERFORMANCE.csv",
								"atc_container": "data-warehouse",
								"atc_path": "referentiel_atc.csv",
								"output_container": "data-warehouse",
								"output_path": "Temp/LEVIER_RH.xlsx"
							}
						},
						"linkedServiceName": {
							"referenceName": "AzureFunctionPremium",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "RH"
				},
				"annotations": [],
				"lastPublishTime": "2022-01-06T12:25:17Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_MABILE')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "MABILE_PREPARATION",
						"description": "Input : \n-MabilleSaunierDuvale\n-OrganisationMabilleSonac\n-ventesDirectes\nOutput : \n-MabileQteNull\n-organisationNotFound\n-MABILE_ECOULEMENT_OUTPUT",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "MABILE_PREPARATION",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"MabilleSaunierDuvale": {},
									"OrganisationMabilleSonac": {},
									"ventesDirectes": {},
									"MABILLEECOULPREPARED": {},
									"MabileQteNull": {},
									"organisationNotFound": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "PREPARATION ECOULEMENT"
				},
				"annotations": [],
				"lastPublishTime": "2022-01-06T12:25:16Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_MAILLARD')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "MAILLARD_PREPARATION",
						"description": "Input : \necoulement\norganisation\nventesDirectes\nOutput : \norgaNotFound\nMAILLARD_ECOUL_PREPARED",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "MAILLARD_PREPARATION",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"ecoulement": {},
									"organisation": {},
									"ventesDirectes": {},
									"MAILLARDECOULPREPARED": {},
									"organisationNotFound": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "PREPARATION ECOULEMENT"
				},
				"annotations": [],
				"lastPublishTime": "2022-01-06T12:25:17Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_MAIN_BASE_COMMERCIALE')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "PREPARATION_ECC_AVOIR",
						"description": "Input : \necoulement\navoir\nsalerDSC\nOrgaTerevas\nOutput : \nAZ_OecoulementDscTerevaWithIndex\noutEccDscTereva\nAZ_OecoulementPartedislikeWithIndex\noutEccNotDSCTEREVA\nAZ_AvoirWithIndexDSClike\nDTAvoirRetraiter\nAvoirForVanMarkes",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "TRAITEMENTECOULEMENT_AVOIR_PERIOD",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"ecoulement": {},
									"avoir": {},
									"salerDSC": {},
									"OrgaTerevas": {},
									"prixParPeriode": {},
									"outEccDscTereva": {},
									"DTAvoirRetraiter": {},
									"outEcoulementDScTereva": {},
									"outputEcoulementPartedis": {},
									"outputAvoirDSc": {},
									"AvoirForVanMarkes": {},
									"outputAvoirNotFound": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "ModelVenteDirecte",
						"description": "Input : \nventedirecte\ncomptesap\nrefAtc\nassociationoffre\noffre\nOutput : \noVenteDirect",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "ModelVenteDirecte",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"ventedirecte": {},
									"comptesap": {},
									"refAtc": {},
									"associationoffre": {},
									"offre": {},
									"OVenteDirectePrepared": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "DSCTEREVA2",
						"description": "Input : \necoulementwithIndex\navoirwithIndex\nstgOffre\nreferentielATC\nfacturation\nOutput : \navoirUnMappedutput\noutdsctereva2",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "PREPARATION_ECC_AVOIR",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "DSCTEREVA",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"ecoulementwithIndex": {},
									"avoirwithIndex": {},
									"stgOffre": {},
									"referentielATC": {},
									"facturation": {},
									"prixMoyen": {},
									"OModelDSC": {},
									"avoirUnMapped": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "UNION_BASE_COMMERCIAL",
						"description": "Input : \nventeDirect\nDSCModel\nPartedisModel\nVanMarkes\nOutput : \nOunionBaseCommercialt",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "DSCTEREVA2",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "ModelVenteDirecte",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "PartedisLikeventeDeroge",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "VanMarkes",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "UNION_BASE_COMMERCIAL",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"venteDirecte": {},
									"DSCModel": {},
									"PartedisModel": {},
									"VanMarkes": {},
									"OUnionBasecommercial": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "POST_UNION_FINISH",
						"description": "Input : \nBCUnion\nArticleHierarchi\nPlateformes\nExtractionCompte\nClientEHS\nInputManuel\nStgOffreUnique\nOutput : \nDataCommercialNotFOund\nTEMP_baseCommercialOut\nOutputBaseAllDistru\nDataCommercialDT2",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "UNION_BASE_COMMERCIAL",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "BaseCommercialePOSTUnion",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"BCUnion": {},
									"ArticleHierarchi": {},
									"Plateformes": {},
									"ExtractionCompte": {},
									"ClientEHS": {},
									"StgOffreUnique": {},
									"DataCommercialNotFOund": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "ATC_PERFORMANCE_ET_CLIENT_SAP",
						"description": "Input : \nBASE_AVANT_TRAITEMENT_ATC\nsecteurFictif\nOutput : \nbaseCommercialOut",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "POST_UNION_FINISH",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "ATC_PERFORMANCE_ET_CLIENT_SAP",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"baseCommerciale": {},
									"secteurFictif": {},
									"ExtractionSAP": {},
									"refAtcinput": {},
									"inputManuel": {},
									"outFinale": {},
									"outDTP2": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "PartedisLikeventeDeroge",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "PREPARATION_ECC_AVOIR",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Ventes derogees",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"FacturationForOther": {},
									"ArticulationSap": {},
									"stgOffre": {},
									"PrixPeriode": {},
									"ecoulmnt": {},
									"refAtc": {},
									"endSinkOutput": {},
									"sink1": {},
									"sink2": {},
									"sink3": {},
									"sink4": {},
									"sinkFact43": {},
									"sinkAfterArticulatioOffreJoin": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 32,
								"computeType": "General"
							},
							"traceLevel": "Fine",
							"runConcurrently": true
						}
					},
					{
						"name": "VanMarkes",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "PREPARATION_ECC_AVOIR",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "VanMarkes",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"organisaation": {},
									"Avoir": {},
									"Facturation": {},
									"ExtarctionSAP": {},
									"REFATC": {},
									"Offre": {},
									"articleInput": {},
									"inputEPS": {},
									"PrixPeriode": {},
									"SinkVanMarkes": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "BASE COMMERCIALE"
				},
				"annotations": [],
				"lastPublishTime": "2022-01-20T15:23:58Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/Ventes derogees')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_OBJECTIF_RH')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "PREPARATION OBJECTIF",
						"description": "Input : \nobjectif\nlevierPerformance\nOutput : \nPREPARATION_OBJECTIF_RH\nTEMP_LEVIER_PERFORMANCE",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "PREPARATION_OBJECTIF_RH",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"objectif": {},
									"output": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "AF PREPARATION OBJECTIF",
						"type": "AzureFunctionActivity",
						"dependsOn": [
							{
								"activity": "PREPARATION OBJECTIF",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"functionName": "AF_PREPARATION_OBJECTIF_RH",
							"method": "POST",
							"headers": {},
							"body": {
								"data1_container": "data-warehouse",
								"data1_path": "Temp/PREPARATION_OBJECTIF_RH.csv",
								"data2_container": "data-warehouse",
								"data2_path": "Temp/TEMP_LEVIER_PERFORMANCE.csv",
								"filtre_container": "data-warehouse",
								"filtre_path": "Temp/FILTRE_OBJECTIF_SORTIE.csv",
								"atc_container": "data-warehouse",
								"atc_path": "referentiel_atc.csv",
								"output_container": "data-warehouse",
								"output_path": "Temp/OBJECTIF_RH_PREPARED.xlsx"
							}
						},
						"linkedServiceName": {
							"referenceName": "AzureFunctionPremium",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "RH"
				},
				"annotations": [],
				"lastPublishTime": "2022-01-06T12:25:16Z"
			},
			"dependsOn": []
		}
	]
}